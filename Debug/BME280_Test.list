
BME280_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042ac  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080043e8  080043e8  000053e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004494  08004494  00005494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08004498  08004498  00005498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         0000000c  20000008  0800449c  00006008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000b8  20000014  080044a8  00006014  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  200000cc  080044a8  000060cc  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000ced7  00000000  00000000  00006044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002129  00000000  00000000  00012f1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000011e0  00000000  00000000  00015048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000d84  00000000  00000000  00016228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0002054a  00000000  00000000  00016fac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000ef56  00000000  00000000  000374f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000cef60  00000000  00000000  0004644c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001153ac  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004aec  00000000  00000000  001153f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000067  00000000  00000000  00119edc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000014 	.word	0x20000014
 8000158:	00000000 	.word	0x00000000
 800015c:	080043d0 	.word	0x080043d0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000018 	.word	0x20000018
 8000178:	080043d0 	.word	0x080043d0

0800017c <__aeabi_drsub>:
 800017c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000180:	e002      	b.n	8000188 <__adddf3>
 8000182:	bf00      	nop

08000184 <__aeabi_dsub>:
 8000184:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000188 <__adddf3>:
 8000188:	b530      	push	{r4, r5, lr}
 800018a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800018e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000192:	ea94 0f05 	teq	r4, r5
 8000196:	bf08      	it	eq
 8000198:	ea90 0f02 	teqeq	r0, r2
 800019c:	bf1f      	itttt	ne
 800019e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ae:	f000 80e2 	beq.w	8000376 <__adddf3+0x1ee>
 80001b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ba:	bfb8      	it	lt
 80001bc:	426d      	neglt	r5, r5
 80001be:	dd0c      	ble.n	80001da <__adddf3+0x52>
 80001c0:	442c      	add	r4, r5
 80001c2:	ea80 0202 	eor.w	r2, r0, r2
 80001c6:	ea81 0303 	eor.w	r3, r1, r3
 80001ca:	ea82 0000 	eor.w	r0, r2, r0
 80001ce:	ea83 0101 	eor.w	r1, r3, r1
 80001d2:	ea80 0202 	eor.w	r2, r0, r2
 80001d6:	ea81 0303 	eor.w	r3, r1, r3
 80001da:	2d36      	cmp	r5, #54	@ 0x36
 80001dc:	bf88      	it	hi
 80001de:	bd30      	pophi	{r4, r5, pc}
 80001e0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f0:	d002      	beq.n	80001f8 <__adddf3+0x70>
 80001f2:	4240      	negs	r0, r0
 80001f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000200:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x84>
 8000206:	4252      	negs	r2, r2
 8000208:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800020c:	ea94 0f05 	teq	r4, r5
 8000210:	f000 80a7 	beq.w	8000362 <__adddf3+0x1da>
 8000214:	f1a4 0401 	sub.w	r4, r4, #1
 8000218:	f1d5 0e20 	rsbs	lr, r5, #32
 800021c:	db0d      	blt.n	800023a <__adddf3+0xb2>
 800021e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000222:	fa22 f205 	lsr.w	r2, r2, r5
 8000226:	1880      	adds	r0, r0, r2
 8000228:	f141 0100 	adc.w	r1, r1, #0
 800022c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000230:	1880      	adds	r0, r0, r2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	4159      	adcs	r1, r3
 8000238:	e00e      	b.n	8000258 <__adddf3+0xd0>
 800023a:	f1a5 0520 	sub.w	r5, r5, #32
 800023e:	f10e 0e20 	add.w	lr, lr, #32
 8000242:	2a01      	cmp	r2, #1
 8000244:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000248:	bf28      	it	cs
 800024a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800024e:	fa43 f305 	asr.w	r3, r3, r5
 8000252:	18c0      	adds	r0, r0, r3
 8000254:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000258:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800025c:	d507      	bpl.n	800026e <__adddf3+0xe6>
 800025e:	f04f 0e00 	mov.w	lr, #0
 8000262:	f1dc 0c00 	rsbs	ip, ip, #0
 8000266:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026a:	eb6e 0101 	sbc.w	r1, lr, r1
 800026e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000272:	d31b      	bcc.n	80002ac <__adddf3+0x124>
 8000274:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000278:	d30c      	bcc.n	8000294 <__adddf3+0x10c>
 800027a:	0849      	lsrs	r1, r1, #1
 800027c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000280:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000284:	f104 0401 	add.w	r4, r4, #1
 8000288:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800028c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000290:	f080 809a 	bcs.w	80003c8 <__adddf3+0x240>
 8000294:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000298:	bf08      	it	eq
 800029a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800029e:	f150 0000 	adcs.w	r0, r0, #0
 80002a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002a6:	ea41 0105 	orr.w	r1, r1, r5
 80002aa:	bd30      	pop	{r4, r5, pc}
 80002ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b0:	4140      	adcs	r0, r0
 80002b2:	eb41 0101 	adc.w	r1, r1, r1
 80002b6:	3c01      	subs	r4, #1
 80002b8:	bf28      	it	cs
 80002ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002be:	d2e9      	bcs.n	8000294 <__adddf3+0x10c>
 80002c0:	f091 0f00 	teq	r1, #0
 80002c4:	bf04      	itt	eq
 80002c6:	4601      	moveq	r1, r0
 80002c8:	2000      	moveq	r0, #0
 80002ca:	fab1 f381 	clz	r3, r1
 80002ce:	bf08      	it	eq
 80002d0:	3320      	addeq	r3, #32
 80002d2:	f1a3 030b 	sub.w	r3, r3, #11
 80002d6:	f1b3 0220 	subs.w	r2, r3, #32
 80002da:	da0c      	bge.n	80002f6 <__adddf3+0x16e>
 80002dc:	320c      	adds	r2, #12
 80002de:	dd08      	ble.n	80002f2 <__adddf3+0x16a>
 80002e0:	f102 0c14 	add.w	ip, r2, #20
 80002e4:	f1c2 020c 	rsb	r2, r2, #12
 80002e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002ec:	fa21 f102 	lsr.w	r1, r1, r2
 80002f0:	e00c      	b.n	800030c <__adddf3+0x184>
 80002f2:	f102 0214 	add.w	r2, r2, #20
 80002f6:	bfd8      	it	le
 80002f8:	f1c2 0c20 	rsble	ip, r2, #32
 80002fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000300:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000304:	bfdc      	itt	le
 8000306:	ea41 010c 	orrle.w	r1, r1, ip
 800030a:	4090      	lslle	r0, r2
 800030c:	1ae4      	subs	r4, r4, r3
 800030e:	bfa2      	ittt	ge
 8000310:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000314:	4329      	orrge	r1, r5
 8000316:	bd30      	popge	{r4, r5, pc}
 8000318:	ea6f 0404 	mvn.w	r4, r4
 800031c:	3c1f      	subs	r4, #31
 800031e:	da1c      	bge.n	800035a <__adddf3+0x1d2>
 8000320:	340c      	adds	r4, #12
 8000322:	dc0e      	bgt.n	8000342 <__adddf3+0x1ba>
 8000324:	f104 0414 	add.w	r4, r4, #20
 8000328:	f1c4 0220 	rsb	r2, r4, #32
 800032c:	fa20 f004 	lsr.w	r0, r0, r4
 8000330:	fa01 f302 	lsl.w	r3, r1, r2
 8000334:	ea40 0003 	orr.w	r0, r0, r3
 8000338:	fa21 f304 	lsr.w	r3, r1, r4
 800033c:	ea45 0103 	orr.w	r1, r5, r3
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f1c4 040c 	rsb	r4, r4, #12
 8000346:	f1c4 0220 	rsb	r2, r4, #32
 800034a:	fa20 f002 	lsr.w	r0, r0, r2
 800034e:	fa01 f304 	lsl.w	r3, r1, r4
 8000352:	ea40 0003 	orr.w	r0, r0, r3
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	fa21 f004 	lsr.w	r0, r1, r4
 800035e:	4629      	mov	r1, r5
 8000360:	bd30      	pop	{r4, r5, pc}
 8000362:	f094 0f00 	teq	r4, #0
 8000366:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800036a:	bf06      	itte	eq
 800036c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000370:	3401      	addeq	r4, #1
 8000372:	3d01      	subne	r5, #1
 8000374:	e74e      	b.n	8000214 <__adddf3+0x8c>
 8000376:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037a:	bf18      	it	ne
 800037c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000380:	d029      	beq.n	80003d6 <__adddf3+0x24e>
 8000382:	ea94 0f05 	teq	r4, r5
 8000386:	bf08      	it	eq
 8000388:	ea90 0f02 	teqeq	r0, r2
 800038c:	d005      	beq.n	800039a <__adddf3+0x212>
 800038e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000392:	bf04      	itt	eq
 8000394:	4619      	moveq	r1, r3
 8000396:	4610      	moveq	r0, r2
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	ea91 0f03 	teq	r1, r3
 800039e:	bf1e      	ittt	ne
 80003a0:	2100      	movne	r1, #0
 80003a2:	2000      	movne	r0, #0
 80003a4:	bd30      	popne	{r4, r5, pc}
 80003a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003aa:	d105      	bne.n	80003b8 <__adddf3+0x230>
 80003ac:	0040      	lsls	r0, r0, #1
 80003ae:	4149      	adcs	r1, r1
 80003b0:	bf28      	it	cs
 80003b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003bc:	bf3c      	itt	cc
 80003be:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003c2:	bd30      	popcc	{r4, r5, pc}
 80003c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003cc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003d0:	f04f 0000 	mov.w	r0, #0
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003da:	bf1a      	itte	ne
 80003dc:	4619      	movne	r1, r3
 80003de:	4610      	movne	r0, r2
 80003e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e4:	bf1c      	itt	ne
 80003e6:	460b      	movne	r3, r1
 80003e8:	4602      	movne	r2, r0
 80003ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ee:	bf06      	itte	eq
 80003f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f4:	ea91 0f03 	teqeq	r1, r3
 80003f8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	bf00      	nop

08000400 <__aeabi_ui2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000414:	f04f 0500 	mov.w	r5, #0
 8000418:	f04f 0100 	mov.w	r1, #0
 800041c:	e750      	b.n	80002c0 <__adddf3+0x138>
 800041e:	bf00      	nop

08000420 <__aeabi_i2d>:
 8000420:	f090 0f00 	teq	r0, #0
 8000424:	bf04      	itt	eq
 8000426:	2100      	moveq	r1, #0
 8000428:	4770      	bxeq	lr
 800042a:	b530      	push	{r4, r5, lr}
 800042c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000430:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000434:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000438:	bf48      	it	mi
 800043a:	4240      	negmi	r0, r0
 800043c:	f04f 0100 	mov.w	r1, #0
 8000440:	e73e      	b.n	80002c0 <__adddf3+0x138>
 8000442:	bf00      	nop

08000444 <__aeabi_f2d>:
 8000444:	0042      	lsls	r2, r0, #1
 8000446:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044a:	ea4f 0131 	mov.w	r1, r1, rrx
 800044e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000452:	bf1f      	itttt	ne
 8000454:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000458:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800045c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000460:	4770      	bxne	lr
 8000462:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000466:	bf08      	it	eq
 8000468:	4770      	bxeq	lr
 800046a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800046e:	bf04      	itt	eq
 8000470:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000480:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000484:	e71c      	b.n	80002c0 <__adddf3+0x138>
 8000486:	bf00      	nop

08000488 <__aeabi_ul2d>:
 8000488:	ea50 0201 	orrs.w	r2, r0, r1
 800048c:	bf08      	it	eq
 800048e:	4770      	bxeq	lr
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	f04f 0500 	mov.w	r5, #0
 8000496:	e00a      	b.n	80004ae <__aeabi_l2d+0x16>

08000498 <__aeabi_l2d>:
 8000498:	ea50 0201 	orrs.w	r2, r0, r1
 800049c:	bf08      	it	eq
 800049e:	4770      	bxeq	lr
 80004a0:	b530      	push	{r4, r5, lr}
 80004a2:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004a6:	d502      	bpl.n	80004ae <__aeabi_l2d+0x16>
 80004a8:	4240      	negs	r0, r0
 80004aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ae:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ba:	f43f aed8 	beq.w	800026e <__adddf3+0xe6>
 80004be:	f04f 0203 	mov.w	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ce:	bf18      	it	ne
 80004d0:	3203      	addne	r2, #3
 80004d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004d6:	f1c2 0320 	rsb	r3, r2, #32
 80004da:	fa00 fc03 	lsl.w	ip, r0, r3
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004e6:	ea40 000e 	orr.w	r0, r0, lr
 80004ea:	fa21 f102 	lsr.w	r1, r1, r2
 80004ee:	4414      	add	r4, r2
 80004f0:	e6bd      	b.n	800026e <__adddf3+0xe6>
 80004f2:	bf00      	nop

080004f4 <__aeabi_dmul>:
 80004f4:	b570      	push	{r4, r5, r6, lr}
 80004f6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004fa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000502:	bf1d      	ittte	ne
 8000504:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000508:	ea94 0f0c 	teqne	r4, ip
 800050c:	ea95 0f0c 	teqne	r5, ip
 8000510:	f000 f8de 	bleq	80006d0 <__aeabi_dmul+0x1dc>
 8000514:	442c      	add	r4, r5
 8000516:	ea81 0603 	eor.w	r6, r1, r3
 800051a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800051e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000522:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000526:	bf18      	it	ne
 8000528:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800052c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000530:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000534:	d038      	beq.n	80005a8 <__aeabi_dmul+0xb4>
 8000536:	fba0 ce02 	umull	ip, lr, r0, r2
 800053a:	f04f 0500 	mov.w	r5, #0
 800053e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000542:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000546:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054a:	f04f 0600 	mov.w	r6, #0
 800054e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000552:	f09c 0f00 	teq	ip, #0
 8000556:	bf18      	it	ne
 8000558:	f04e 0e01 	orrne.w	lr, lr, #1
 800055c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000560:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000564:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000568:	d204      	bcs.n	8000574 <__aeabi_dmul+0x80>
 800056a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800056e:	416d      	adcs	r5, r5
 8000570:	eb46 0606 	adc.w	r6, r6, r6
 8000574:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000578:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800057c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000580:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000584:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000588:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800058c:	bf88      	it	hi
 800058e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000592:	d81e      	bhi.n	80005d2 <__aeabi_dmul+0xde>
 8000594:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000598:	bf08      	it	eq
 800059a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800059e:	f150 0000 	adcs.w	r0, r0, #0
 80005a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a6:	bd70      	pop	{r4, r5, r6, pc}
 80005a8:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005ac:	ea46 0101 	orr.w	r1, r6, r1
 80005b0:	ea40 0002 	orr.w	r0, r0, r2
 80005b4:	ea81 0103 	eor.w	r1, r1, r3
 80005b8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005bc:	bfc2      	ittt	gt
 80005be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005c6:	bd70      	popgt	{r4, r5, r6, pc}
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f04f 0e00 	mov.w	lr, #0
 80005d0:	3c01      	subs	r4, #1
 80005d2:	f300 80ab 	bgt.w	800072c <__aeabi_dmul+0x238>
 80005d6:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005da:	bfde      	ittt	le
 80005dc:	2000      	movle	r0, #0
 80005de:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005e2:	bd70      	pople	{r4, r5, r6, pc}
 80005e4:	f1c4 0400 	rsb	r4, r4, #0
 80005e8:	3c20      	subs	r4, #32
 80005ea:	da35      	bge.n	8000658 <__aeabi_dmul+0x164>
 80005ec:	340c      	adds	r4, #12
 80005ee:	dc1b      	bgt.n	8000628 <__aeabi_dmul+0x134>
 80005f0:	f104 0414 	add.w	r4, r4, #20
 80005f4:	f1c4 0520 	rsb	r5, r4, #32
 80005f8:	fa00 f305 	lsl.w	r3, r0, r5
 80005fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000600:	fa01 f205 	lsl.w	r2, r1, r5
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800060c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000614:	fa21 f604 	lsr.w	r6, r1, r4
 8000618:	eb42 0106 	adc.w	r1, r2, r6
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 040c 	rsb	r4, r4, #12
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f304 	lsl.w	r3, r0, r4
 8000634:	fa20 f005 	lsr.w	r0, r0, r5
 8000638:	fa01 f204 	lsl.w	r2, r1, r4
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000644:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000648:	f141 0100 	adc.w	r1, r1, #0
 800064c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000650:	bf08      	it	eq
 8000652:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000656:	bd70      	pop	{r4, r5, r6, pc}
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f205 	lsl.w	r2, r0, r5
 8000660:	ea4e 0e02 	orr.w	lr, lr, r2
 8000664:	fa20 f304 	lsr.w	r3, r0, r4
 8000668:	fa01 f205 	lsl.w	r2, r1, r5
 800066c:	ea43 0302 	orr.w	r3, r3, r2
 8000670:	fa21 f004 	lsr.w	r0, r1, r4
 8000674:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000678:	fa21 f204 	lsr.w	r2, r1, r4
 800067c:	ea20 0002 	bic.w	r0, r0, r2
 8000680:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000684:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000688:	bf08      	it	eq
 800068a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f094 0f00 	teq	r4, #0
 8000694:	d10f      	bne.n	80006b6 <__aeabi_dmul+0x1c2>
 8000696:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800069a:	0040      	lsls	r0, r0, #1
 800069c:	eb41 0101 	adc.w	r1, r1, r1
 80006a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006a4:	bf08      	it	eq
 80006a6:	3c01      	subeq	r4, #1
 80006a8:	d0f7      	beq.n	800069a <__aeabi_dmul+0x1a6>
 80006aa:	ea41 0106 	orr.w	r1, r1, r6
 80006ae:	f095 0f00 	teq	r5, #0
 80006b2:	bf18      	it	ne
 80006b4:	4770      	bxne	lr
 80006b6:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006ba:	0052      	lsls	r2, r2, #1
 80006bc:	eb43 0303 	adc.w	r3, r3, r3
 80006c0:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006c4:	bf08      	it	eq
 80006c6:	3d01      	subeq	r5, #1
 80006c8:	d0f7      	beq.n	80006ba <__aeabi_dmul+0x1c6>
 80006ca:	ea43 0306 	orr.w	r3, r3, r6
 80006ce:	4770      	bx	lr
 80006d0:	ea94 0f0c 	teq	r4, ip
 80006d4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d8:	bf18      	it	ne
 80006da:	ea95 0f0c 	teqne	r5, ip
 80006de:	d00c      	beq.n	80006fa <__aeabi_dmul+0x206>
 80006e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e4:	bf18      	it	ne
 80006e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ea:	d1d1      	bne.n	8000690 <__aeabi_dmul+0x19c>
 80006ec:	ea81 0103 	eor.w	r1, r1, r3
 80006f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f4:	f04f 0000 	mov.w	r0, #0
 80006f8:	bd70      	pop	{r4, r5, r6, pc}
 80006fa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fe:	bf06      	itte	eq
 8000700:	4610      	moveq	r0, r2
 8000702:	4619      	moveq	r1, r3
 8000704:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000708:	d019      	beq.n	800073e <__aeabi_dmul+0x24a>
 800070a:	ea94 0f0c 	teq	r4, ip
 800070e:	d102      	bne.n	8000716 <__aeabi_dmul+0x222>
 8000710:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000714:	d113      	bne.n	800073e <__aeabi_dmul+0x24a>
 8000716:	ea95 0f0c 	teq	r5, ip
 800071a:	d105      	bne.n	8000728 <__aeabi_dmul+0x234>
 800071c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000720:	bf1c      	itt	ne
 8000722:	4610      	movne	r0, r2
 8000724:	4619      	movne	r1, r3
 8000726:	d10a      	bne.n	800073e <__aeabi_dmul+0x24a>
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000730:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000742:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000746:	bd70      	pop	{r4, r5, r6, pc}

08000748 <__aeabi_ddiv>:
 8000748:	b570      	push	{r4, r5, r6, lr}
 800074a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800074e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000752:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000756:	bf1d      	ittte	ne
 8000758:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800075c:	ea94 0f0c 	teqne	r4, ip
 8000760:	ea95 0f0c 	teqne	r5, ip
 8000764:	f000 f8a7 	bleq	80008b6 <__aeabi_ddiv+0x16e>
 8000768:	eba4 0405 	sub.w	r4, r4, r5
 800076c:	ea81 0e03 	eor.w	lr, r1, r3
 8000770:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000774:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000778:	f000 8088 	beq.w	800088c <__aeabi_ddiv+0x144>
 800077c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000780:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000784:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000788:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800078c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000790:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000794:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000798:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800079c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007a0:	429d      	cmp	r5, r3
 80007a2:	bf08      	it	eq
 80007a4:	4296      	cmpeq	r6, r2
 80007a6:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007aa:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007ae:	d202      	bcs.n	80007b6 <__aeabi_ddiv+0x6e>
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	1ab6      	subs	r6, r6, r2
 80007b8:	eb65 0503 	sbc.w	r5, r5, r3
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007c6:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	ebb6 0e02 	subs.w	lr, r6, r2
 8000816:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081a:	bf22      	ittt	cs
 800081c:	1ab6      	subcs	r6, r6, r2
 800081e:	4675      	movcs	r5, lr
 8000820:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000824:	ea55 0e06 	orrs.w	lr, r5, r6
 8000828:	d018      	beq.n	800085c <__aeabi_ddiv+0x114>
 800082a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800082e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000832:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000836:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800083e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000842:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000846:	d1c0      	bne.n	80007ca <__aeabi_ddiv+0x82>
 8000848:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800084c:	d10b      	bne.n	8000866 <__aeabi_ddiv+0x11e>
 800084e:	ea41 0100 	orr.w	r1, r1, r0
 8000852:	f04f 0000 	mov.w	r0, #0
 8000856:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800085a:	e7b6      	b.n	80007ca <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000860:	bf04      	itt	eq
 8000862:	4301      	orreq	r1, r0
 8000864:	2000      	moveq	r0, #0
 8000866:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800086a:	bf88      	it	hi
 800086c:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000870:	f63f aeaf 	bhi.w	80005d2 <__aeabi_dmul+0xde>
 8000874:	ebb5 0c03 	subs.w	ip, r5, r3
 8000878:	bf04      	itt	eq
 800087a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800087e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000882:	f150 0000 	adcs.w	r0, r0, #0
 8000886:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088a:	bd70      	pop	{r4, r5, r6, pc}
 800088c:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000890:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000894:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000898:	bfc2      	ittt	gt
 800089a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800089e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a2:	bd70      	popgt	{r4, r5, r6, pc}
 80008a4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a8:	f04f 0e00 	mov.w	lr, #0
 80008ac:	3c01      	subs	r4, #1
 80008ae:	e690      	b.n	80005d2 <__aeabi_dmul+0xde>
 80008b0:	ea45 0e06 	orr.w	lr, r5, r6
 80008b4:	e68d      	b.n	80005d2 <__aeabi_dmul+0xde>
 80008b6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ba:	ea94 0f0c 	teq	r4, ip
 80008be:	bf08      	it	eq
 80008c0:	ea95 0f0c 	teqeq	r5, ip
 80008c4:	f43f af3b 	beq.w	800073e <__aeabi_dmul+0x24a>
 80008c8:	ea94 0f0c 	teq	r4, ip
 80008cc:	d10a      	bne.n	80008e4 <__aeabi_ddiv+0x19c>
 80008ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d2:	f47f af34 	bne.w	800073e <__aeabi_dmul+0x24a>
 80008d6:	ea95 0f0c 	teq	r5, ip
 80008da:	f47f af25 	bne.w	8000728 <__aeabi_dmul+0x234>
 80008de:	4610      	mov	r0, r2
 80008e0:	4619      	mov	r1, r3
 80008e2:	e72c      	b.n	800073e <__aeabi_dmul+0x24a>
 80008e4:	ea95 0f0c 	teq	r5, ip
 80008e8:	d106      	bne.n	80008f8 <__aeabi_ddiv+0x1b0>
 80008ea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ee:	f43f aefd 	beq.w	80006ec <__aeabi_dmul+0x1f8>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e722      	b.n	800073e <__aeabi_dmul+0x24a>
 80008f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008fc:	bf18      	it	ne
 80008fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000902:	f47f aec5 	bne.w	8000690 <__aeabi_dmul+0x19c>
 8000906:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090a:	f47f af0d 	bne.w	8000728 <__aeabi_dmul+0x234>
 800090e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000912:	f47f aeeb 	bne.w	80006ec <__aeabi_dmul+0x1f8>
 8000916:	e712      	b.n	800073e <__aeabi_dmul+0x24a>

08000918 <__aeabi_d2f>:
 8000918:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800091c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000920:	bf24      	itt	cs
 8000922:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000926:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800092a:	d90d      	bls.n	8000948 <__aeabi_d2f+0x30>
 800092c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000930:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000934:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000938:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800093c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000940:	bf08      	it	eq
 8000942:	f020 0001 	biceq.w	r0, r0, #1
 8000946:	4770      	bx	lr
 8000948:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800094c:	d121      	bne.n	8000992 <__aeabi_d2f+0x7a>
 800094e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000952:	bfbc      	itt	lt
 8000954:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000958:	4770      	bxlt	lr
 800095a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000962:	f1c2 0218 	rsb	r2, r2, #24
 8000966:	f1c2 0c20 	rsb	ip, r2, #32
 800096a:	fa10 f30c 	lsls.w	r3, r0, ip
 800096e:	fa20 f002 	lsr.w	r0, r0, r2
 8000972:	bf18      	it	ne
 8000974:	f040 0001 	orrne.w	r0, r0, #1
 8000978:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000980:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000984:	ea40 000c 	orr.w	r0, r0, ip
 8000988:	fa23 f302 	lsr.w	r3, r3, r2
 800098c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000990:	e7cc      	b.n	800092c <__aeabi_d2f+0x14>
 8000992:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000996:	d107      	bne.n	80009a8 <__aeabi_d2f+0x90>
 8000998:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800099c:	bf1e      	ittt	ne
 800099e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009a2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009a6:	4770      	bxne	lr
 80009a8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009ac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009b0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08c      	sub	sp, #48	@ 0x30
 80009bc:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 80009be:	f04f 33ff 	mov.w	r3, #4294967295
 80009c2:	9302      	str	r3, [sp, #8]
 80009c4:	2319      	movs	r3, #25
 80009c6:	9301      	str	r3, [sp, #4]
 80009c8:	463b      	mov	r3, r7
 80009ca:	9300      	str	r3, [sp, #0]
 80009cc:	2301      	movs	r3, #1
 80009ce:	2288      	movs	r2, #136	@ 0x88
 80009d0:	21ec      	movs	r1, #236	@ 0xec
 80009d2:	485f      	ldr	r0, [pc, #380]	@ (8000b50 <TrimRead+0x198>)
 80009d4:	f001 fad2 	bl	8001f7c <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 80009d8:	463b      	mov	r3, r7
 80009da:	3319      	adds	r3, #25
 80009dc:	f04f 32ff 	mov.w	r2, #4294967295
 80009e0:	9202      	str	r2, [sp, #8]
 80009e2:	2207      	movs	r2, #7
 80009e4:	9201      	str	r2, [sp, #4]
 80009e6:	9300      	str	r3, [sp, #0]
 80009e8:	2301      	movs	r3, #1
 80009ea:	22e1      	movs	r2, #225	@ 0xe1
 80009ec:	21ec      	movs	r1, #236	@ 0xec
 80009ee:	4858      	ldr	r0, [pc, #352]	@ (8000b50 <TrimRead+0x198>)
 80009f0:	f001 fac4 	bl	8001f7c <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 80009f4:	787b      	ldrb	r3, [r7, #1]
 80009f6:	b21b      	sxth	r3, r3
 80009f8:	021b      	lsls	r3, r3, #8
 80009fa:	b21a      	sxth	r2, r3
 80009fc:	783b      	ldrb	r3, [r7, #0]
 80009fe:	b21b      	sxth	r3, r3
 8000a00:	4313      	orrs	r3, r2
 8000a02:	b21b      	sxth	r3, r3
 8000a04:	b29a      	uxth	r2, r3
 8000a06:	4b53      	ldr	r3, [pc, #332]	@ (8000b54 <TrimRead+0x19c>)
 8000a08:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 8000a0a:	78fb      	ldrb	r3, [r7, #3]
 8000a0c:	b21b      	sxth	r3, r3
 8000a0e:	021b      	lsls	r3, r3, #8
 8000a10:	b21a      	sxth	r2, r3
 8000a12:	78bb      	ldrb	r3, [r7, #2]
 8000a14:	b21b      	sxth	r3, r3
 8000a16:	4313      	orrs	r3, r2
 8000a18:	b21a      	sxth	r2, r3
 8000a1a:	4b4f      	ldr	r3, [pc, #316]	@ (8000b58 <TrimRead+0x1a0>)
 8000a1c:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 8000a1e:	797b      	ldrb	r3, [r7, #5]
 8000a20:	b21b      	sxth	r3, r3
 8000a22:	021b      	lsls	r3, r3, #8
 8000a24:	b21a      	sxth	r2, r3
 8000a26:	793b      	ldrb	r3, [r7, #4]
 8000a28:	b21b      	sxth	r3, r3
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	b21a      	sxth	r2, r3
 8000a2e:	4b4b      	ldr	r3, [pc, #300]	@ (8000b5c <TrimRead+0x1a4>)
 8000a30:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	b21b      	sxth	r3, r3
 8000a36:	021b      	lsls	r3, r3, #8
 8000a38:	b21a      	sxth	r2, r3
 8000a3a:	797b      	ldrb	r3, [r7, #5]
 8000a3c:	b21b      	sxth	r3, r3
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	b21b      	sxth	r3, r3
 8000a42:	b29a      	uxth	r2, r3
 8000a44:	4b46      	ldr	r3, [pc, #280]	@ (8000b60 <TrimRead+0x1a8>)
 8000a46:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8000a48:	7a7b      	ldrb	r3, [r7, #9]
 8000a4a:	b21b      	sxth	r3, r3
 8000a4c:	021b      	lsls	r3, r3, #8
 8000a4e:	b21a      	sxth	r2, r3
 8000a50:	79bb      	ldrb	r3, [r7, #6]
 8000a52:	b21b      	sxth	r3, r3
 8000a54:	4313      	orrs	r3, r2
 8000a56:	b21a      	sxth	r2, r3
 8000a58:	4b42      	ldr	r3, [pc, #264]	@ (8000b64 <TrimRead+0x1ac>)
 8000a5a:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 8000a5c:	7afb      	ldrb	r3, [r7, #11]
 8000a5e:	b21b      	sxth	r3, r3
 8000a60:	021b      	lsls	r3, r3, #8
 8000a62:	b21a      	sxth	r2, r3
 8000a64:	7abb      	ldrb	r3, [r7, #10]
 8000a66:	b21b      	sxth	r3, r3
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	b21a      	sxth	r2, r3
 8000a6c:	4b3e      	ldr	r3, [pc, #248]	@ (8000b68 <TrimRead+0x1b0>)
 8000a6e:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8000a70:	7b7b      	ldrb	r3, [r7, #13]
 8000a72:	b21b      	sxth	r3, r3
 8000a74:	021b      	lsls	r3, r3, #8
 8000a76:	b21a      	sxth	r2, r3
 8000a78:	7b3b      	ldrb	r3, [r7, #12]
 8000a7a:	b21b      	sxth	r3, r3
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	b21a      	sxth	r2, r3
 8000a80:	4b3a      	ldr	r3, [pc, #232]	@ (8000b6c <TrimRead+0x1b4>)
 8000a82:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 8000a84:	7bfb      	ldrb	r3, [r7, #15]
 8000a86:	b21b      	sxth	r3, r3
 8000a88:	021b      	lsls	r3, r3, #8
 8000a8a:	b21a      	sxth	r2, r3
 8000a8c:	7bbb      	ldrb	r3, [r7, #14]
 8000a8e:	b21b      	sxth	r3, r3
 8000a90:	4313      	orrs	r3, r2
 8000a92:	b21a      	sxth	r2, r3
 8000a94:	4b36      	ldr	r3, [pc, #216]	@ (8000b70 <TrimRead+0x1b8>)
 8000a96:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 8000a98:	7c7b      	ldrb	r3, [r7, #17]
 8000a9a:	b21b      	sxth	r3, r3
 8000a9c:	021b      	lsls	r3, r3, #8
 8000a9e:	b21a      	sxth	r2, r3
 8000aa0:	7c3b      	ldrb	r3, [r7, #16]
 8000aa2:	b21b      	sxth	r3, r3
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	b21a      	sxth	r2, r3
 8000aa8:	4b32      	ldr	r3, [pc, #200]	@ (8000b74 <TrimRead+0x1bc>)
 8000aaa:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 8000aac:	7cfb      	ldrb	r3, [r7, #19]
 8000aae:	b21b      	sxth	r3, r3
 8000ab0:	021b      	lsls	r3, r3, #8
 8000ab2:	b21a      	sxth	r2, r3
 8000ab4:	7cbb      	ldrb	r3, [r7, #18]
 8000ab6:	b21b      	sxth	r3, r3
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	b21a      	sxth	r2, r3
 8000abc:	4b2e      	ldr	r3, [pc, #184]	@ (8000b78 <TrimRead+0x1c0>)
 8000abe:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 8000ac0:	7d7b      	ldrb	r3, [r7, #21]
 8000ac2:	b21b      	sxth	r3, r3
 8000ac4:	021b      	lsls	r3, r3, #8
 8000ac6:	b21a      	sxth	r2, r3
 8000ac8:	7d3b      	ldrb	r3, [r7, #20]
 8000aca:	b21b      	sxth	r3, r3
 8000acc:	4313      	orrs	r3, r2
 8000ace:	b21a      	sxth	r2, r3
 8000ad0:	4b2a      	ldr	r3, [pc, #168]	@ (8000b7c <TrimRead+0x1c4>)
 8000ad2:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 8000ad4:	7dfb      	ldrb	r3, [r7, #23]
 8000ad6:	b21b      	sxth	r3, r3
 8000ad8:	021b      	lsls	r3, r3, #8
 8000ada:	b21a      	sxth	r2, r3
 8000adc:	7dbb      	ldrb	r3, [r7, #22]
 8000ade:	b21b      	sxth	r3, r3
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	b21a      	sxth	r2, r3
 8000ae4:	4b26      	ldr	r3, [pc, #152]	@ (8000b80 <TrimRead+0x1c8>)
 8000ae6:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 8000ae8:	7e3b      	ldrb	r3, [r7, #24]
 8000aea:	461a      	mov	r2, r3
 8000aec:	4b25      	ldr	r3, [pc, #148]	@ (8000b84 <TrimRead+0x1cc>)
 8000aee:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 8000af0:	7ebb      	ldrb	r3, [r7, #26]
 8000af2:	b21b      	sxth	r3, r3
 8000af4:	021b      	lsls	r3, r3, #8
 8000af6:	b21a      	sxth	r2, r3
 8000af8:	7e7b      	ldrb	r3, [r7, #25]
 8000afa:	b21b      	sxth	r3, r3
 8000afc:	4313      	orrs	r3, r2
 8000afe:	b21a      	sxth	r2, r3
 8000b00:	4b21      	ldr	r3, [pc, #132]	@ (8000b88 <TrimRead+0x1d0>)
 8000b02:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 8000b04:	7efb      	ldrb	r3, [r7, #27]
 8000b06:	461a      	mov	r2, r3
 8000b08:	4b20      	ldr	r3, [pc, #128]	@ (8000b8c <TrimRead+0x1d4>)
 8000b0a:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 8000b0c:	7f3b      	ldrb	r3, [r7, #28]
 8000b0e:	b21b      	sxth	r3, r3
 8000b10:	011b      	lsls	r3, r3, #4
 8000b12:	b21a      	sxth	r2, r3
 8000b14:	7f7b      	ldrb	r3, [r7, #29]
 8000b16:	b21b      	sxth	r3, r3
 8000b18:	f003 030f 	and.w	r3, r3, #15
 8000b1c:	b21b      	sxth	r3, r3
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	b21a      	sxth	r2, r3
 8000b22:	4b1b      	ldr	r3, [pc, #108]	@ (8000b90 <TrimRead+0x1d8>)
 8000b24:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 8000b26:	7fbb      	ldrb	r3, [r7, #30]
 8000b28:	b21b      	sxth	r3, r3
 8000b2a:	011b      	lsls	r3, r3, #4
 8000b2c:	b21a      	sxth	r2, r3
 8000b2e:	7f7b      	ldrb	r3, [r7, #29]
 8000b30:	091b      	lsrs	r3, r3, #4
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	b21b      	sxth	r3, r3
 8000b36:	4313      	orrs	r3, r2
 8000b38:	b21a      	sxth	r2, r3
 8000b3a:	4b16      	ldr	r3, [pc, #88]	@ (8000b94 <TrimRead+0x1dc>)
 8000b3c:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 8000b3e:	7ffb      	ldrb	r3, [r7, #31]
 8000b40:	b21a      	sxth	r2, r3
 8000b42:	4b15      	ldr	r3, [pc, #84]	@ (8000b98 <TrimRead+0x1e0>)
 8000b44:	801a      	strh	r2, [r3, #0]
}
 8000b46:	bf00      	nop
 8000b48:	3720      	adds	r7, #32
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000068 	.word	0x20000068
 8000b54:	20000040 	.word	0x20000040
 8000b58:	20000048 	.word	0x20000048
 8000b5c:	2000004a 	.word	0x2000004a
 8000b60:	20000042 	.word	0x20000042
 8000b64:	2000004c 	.word	0x2000004c
 8000b68:	2000004e 	.word	0x2000004e
 8000b6c:	20000050 	.word	0x20000050
 8000b70:	20000052 	.word	0x20000052
 8000b74:	20000054 	.word	0x20000054
 8000b78:	20000056 	.word	0x20000056
 8000b7c:	20000058 	.word	0x20000058
 8000b80:	2000005a 	.word	0x2000005a
 8000b84:	20000044 	.word	0x20000044
 8000b88:	2000005c 	.word	0x2000005c
 8000b8c:	20000046 	.word	0x20000046
 8000b90:	2000005e 	.word	0x2000005e
 8000b94:	20000060 	.word	0x20000060
 8000b98:	20000062 	.word	0x20000062

08000b9c <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 8000b9c:	b590      	push	{r4, r7, lr}
 8000b9e:	b089      	sub	sp, #36	@ 0x24
 8000ba0:	af04      	add	r7, sp, #16
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	4608      	mov	r0, r1
 8000ba6:	4611      	mov	r1, r2
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4623      	mov	r3, r4
 8000bac:	71fb      	strb	r3, [r7, #7]
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71bb      	strb	r3, [r7, #6]
 8000bb2:	460b      	mov	r3, r1
 8000bb4:	717b      	strb	r3, [r7, #5]
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 8000bba:	f7ff fefd 	bl	80009b8 <TrimRead>


	uint8_t datatowrite = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 8000bc6:	23b6      	movs	r3, #182	@ 0xb6
 8000bc8:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8000bca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bce:	9302      	str	r3, [sp, #8]
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	9301      	str	r3, [sp, #4]
 8000bd4:	f107 030f 	add.w	r3, r7, #15
 8000bd8:	9300      	str	r3, [sp, #0]
 8000bda:	2301      	movs	r3, #1
 8000bdc:	22e0      	movs	r2, #224	@ 0xe0
 8000bde:	21ec      	movs	r1, #236	@ 0xec
 8000be0:	4859      	ldr	r0, [pc, #356]	@ (8000d48 <BME280_Config+0x1ac>)
 8000be2:	f001 f8b7 	bl	8001d54 <HAL_I2C_Mem_Write>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d002      	beq.n	8000bf2 <BME280_Config+0x56>
	{
		return -1;
 8000bec:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf0:	e0a5      	b.n	8000d3e <BME280_Config+0x1a2>
	}

	HAL_Delay (100);
 8000bf2:	2064      	movs	r0, #100	@ 0x64
 8000bf4:	f000 fd9a 	bl	800172c <HAL_Delay>


	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 8000bf8:	797b      	ldrb	r3, [r7, #5]
 8000bfa:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8000bfc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c00:	9302      	str	r3, [sp, #8]
 8000c02:	2301      	movs	r3, #1
 8000c04:	9301      	str	r3, [sp, #4]
 8000c06:	f107 030f 	add.w	r3, r7, #15
 8000c0a:	9300      	str	r3, [sp, #0]
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	22f2      	movs	r2, #242	@ 0xf2
 8000c10:	21ec      	movs	r1, #236	@ 0xec
 8000c12:	484d      	ldr	r0, [pc, #308]	@ (8000d48 <BME280_Config+0x1ac>)
 8000c14:	f001 f89e 	bl	8001d54 <HAL_I2C_Mem_Write>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d002      	beq.n	8000c24 <BME280_Config+0x88>
	{
		return -1;
 8000c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c22:	e08c      	b.n	8000d3e <BME280_Config+0x1a2>
	}
	HAL_Delay (100);
 8000c24:	2064      	movs	r0, #100	@ 0x64
 8000c26:	f000 fd81 	bl	800172c <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 8000c2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c2e:	9302      	str	r3, [sp, #8]
 8000c30:	2301      	movs	r3, #1
 8000c32:	9301      	str	r3, [sp, #4]
 8000c34:	f107 030e 	add.w	r3, r7, #14
 8000c38:	9300      	str	r3, [sp, #0]
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	22f2      	movs	r2, #242	@ 0xf2
 8000c3e:	21ec      	movs	r1, #236	@ 0xec
 8000c40:	4841      	ldr	r0, [pc, #260]	@ (8000d48 <BME280_Config+0x1ac>)
 8000c42:	f001 f99b 	bl	8001f7c <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8000c46:	7bba      	ldrb	r2, [r7, #14]
 8000c48:	7bfb      	ldrb	r3, [r7, #15]
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d002      	beq.n	8000c54 <BME280_Config+0xb8>
	{
		return -1;
 8000c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c52:	e074      	b.n	8000d3e <BME280_Config+0x1a2>
	}


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 8000c54:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8000c58:	015b      	lsls	r3, r3, #5
 8000c5a:	b25a      	sxtb	r2, r3
 8000c5c:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	b25b      	sxtb	r3, r3
 8000c64:	4313      	orrs	r3, r2
 8000c66:	b25b      	sxtb	r3, r3
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8000c6c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c70:	9302      	str	r3, [sp, #8]
 8000c72:	2301      	movs	r3, #1
 8000c74:	9301      	str	r3, [sp, #4]
 8000c76:	f107 030f 	add.w	r3, r7, #15
 8000c7a:	9300      	str	r3, [sp, #0]
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	22f5      	movs	r2, #245	@ 0xf5
 8000c80:	21ec      	movs	r1, #236	@ 0xec
 8000c82:	4831      	ldr	r0, [pc, #196]	@ (8000d48 <BME280_Config+0x1ac>)
 8000c84:	f001 f866 	bl	8001d54 <HAL_I2C_Mem_Write>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d002      	beq.n	8000c94 <BME280_Config+0xf8>
	{
		return -1;
 8000c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c92:	e054      	b.n	8000d3e <BME280_Config+0x1a2>
	}
	HAL_Delay (100);
 8000c94:	2064      	movs	r0, #100	@ 0x64
 8000c96:	f000 fd49 	bl	800172c <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 8000c9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c9e:	9302      	str	r3, [sp, #8]
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	9301      	str	r3, [sp, #4]
 8000ca4:	f107 030e 	add.w	r3, r7, #14
 8000ca8:	9300      	str	r3, [sp, #0]
 8000caa:	2301      	movs	r3, #1
 8000cac:	22f5      	movs	r2, #245	@ 0xf5
 8000cae:	21ec      	movs	r1, #236	@ 0xec
 8000cb0:	4825      	ldr	r0, [pc, #148]	@ (8000d48 <BME280_Config+0x1ac>)
 8000cb2:	f001 f963 	bl	8001f7c <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8000cb6:	7bba      	ldrb	r2, [r7, #14]
 8000cb8:	7bfb      	ldrb	r3, [r7, #15]
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	d002      	beq.n	8000cc4 <BME280_Config+0x128>
	{
		return -1;
 8000cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc2:	e03c      	b.n	8000d3e <BME280_Config+0x1a2>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 8000cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc8:	015b      	lsls	r3, r3, #5
 8000cca:	b25a      	sxtb	r2, r3
 8000ccc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	b25b      	sxtb	r3, r3
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	b25a      	sxtb	r2, r3
 8000cd8:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	b25b      	sxtb	r3, r3
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8000ce4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ce8:	9302      	str	r3, [sp, #8]
 8000cea:	2301      	movs	r3, #1
 8000cec:	9301      	str	r3, [sp, #4]
 8000cee:	f107 030f 	add.w	r3, r7, #15
 8000cf2:	9300      	str	r3, [sp, #0]
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	22f4      	movs	r2, #244	@ 0xf4
 8000cf8:	21ec      	movs	r1, #236	@ 0xec
 8000cfa:	4813      	ldr	r0, [pc, #76]	@ (8000d48 <BME280_Config+0x1ac>)
 8000cfc:	f001 f82a 	bl	8001d54 <HAL_I2C_Mem_Write>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d002      	beq.n	8000d0c <BME280_Config+0x170>
	{
		return -1;
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0a:	e018      	b.n	8000d3e <BME280_Config+0x1a2>
	}
	HAL_Delay (100);
 8000d0c:	2064      	movs	r0, #100	@ 0x64
 8000d0e:	f000 fd0d 	bl	800172c <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 8000d12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d16:	9302      	str	r3, [sp, #8]
 8000d18:	2301      	movs	r3, #1
 8000d1a:	9301      	str	r3, [sp, #4]
 8000d1c:	f107 030e 	add.w	r3, r7, #14
 8000d20:	9300      	str	r3, [sp, #0]
 8000d22:	2301      	movs	r3, #1
 8000d24:	22f4      	movs	r2, #244	@ 0xf4
 8000d26:	21ec      	movs	r1, #236	@ 0xec
 8000d28:	4807      	ldr	r0, [pc, #28]	@ (8000d48 <BME280_Config+0x1ac>)
 8000d2a:	f001 f927 	bl	8001f7c <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8000d2e:	7bba      	ldrb	r2, [r7, #14]
 8000d30:	7bfb      	ldrb	r3, [r7, #15]
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d002      	beq.n	8000d3c <BME280_Config+0x1a0>
	{
		return -1;
 8000d36:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3a:	e000      	b.n	8000d3e <BME280_Config+0x1a2>
	}

	return 0;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3714      	adds	r7, #20
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd90      	pop	{r4, r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000068 	.word	0x20000068

08000d4c <BMEReadRaw>:


int BMEReadRaw(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 8000d52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d56:	9302      	str	r3, [sp, #8]
 8000d58:	2301      	movs	r3, #1
 8000d5a:	9301      	str	r3, [sp, #4]
 8000d5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd8 <BMEReadRaw+0x8c>)
 8000d5e:	9300      	str	r3, [sp, #0]
 8000d60:	2301      	movs	r3, #1
 8000d62:	22d0      	movs	r2, #208	@ 0xd0
 8000d64:	21ec      	movs	r1, #236	@ 0xec
 8000d66:	481d      	ldr	r0, [pc, #116]	@ (8000ddc <BMEReadRaw+0x90>)
 8000d68:	f001 f908 	bl	8001f7c <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 8000d6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd8 <BMEReadRaw+0x8c>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b60      	cmp	r3, #96	@ 0x60
 8000d72:	d12a      	bne.n	8000dca <BMEReadRaw+0x7e>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 8000d74:	f04f 33ff 	mov.w	r3, #4294967295
 8000d78:	9302      	str	r3, [sp, #8]
 8000d7a:	2308      	movs	r3, #8
 8000d7c:	9301      	str	r3, [sp, #4]
 8000d7e:	463b      	mov	r3, r7
 8000d80:	9300      	str	r3, [sp, #0]
 8000d82:	2301      	movs	r3, #1
 8000d84:	22f7      	movs	r2, #247	@ 0xf7
 8000d86:	21ec      	movs	r1, #236	@ 0xec
 8000d88:	4814      	ldr	r0, [pc, #80]	@ (8000ddc <BMEReadRaw+0x90>)
 8000d8a:	f001 f8f7 	bl	8001f7c <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 8000d8e:	783b      	ldrb	r3, [r7, #0]
 8000d90:	031a      	lsls	r2, r3, #12
 8000d92:	787b      	ldrb	r3, [r7, #1]
 8000d94:	011b      	lsls	r3, r3, #4
 8000d96:	4313      	orrs	r3, r2
 8000d98:	78ba      	ldrb	r2, [r7, #2]
 8000d9a:	0912      	lsrs	r2, r2, #4
 8000d9c:	b2d2      	uxtb	r2, r2
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	4a0f      	ldr	r2, [pc, #60]	@ (8000de0 <BMEReadRaw+0x94>)
 8000da2:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 8000da4:	78fb      	ldrb	r3, [r7, #3]
 8000da6:	031a      	lsls	r2, r3, #12
 8000da8:	793b      	ldrb	r3, [r7, #4]
 8000daa:	011b      	lsls	r3, r3, #4
 8000dac:	4313      	orrs	r3, r2
 8000dae:	797a      	ldrb	r2, [r7, #5]
 8000db0:	0912      	lsrs	r2, r2, #4
 8000db2:	b2d2      	uxtb	r2, r2
 8000db4:	4313      	orrs	r3, r2
 8000db6:	4a0b      	ldr	r2, [pc, #44]	@ (8000de4 <BMEReadRaw+0x98>)
 8000db8:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 8000dba:	79bb      	ldrb	r3, [r7, #6]
 8000dbc:	021b      	lsls	r3, r3, #8
 8000dbe:	79fa      	ldrb	r2, [r7, #7]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	4a09      	ldr	r2, [pc, #36]	@ (8000de8 <BMEReadRaw+0x9c>)
 8000dc4:	6013      	str	r3, [r2, #0]

		return 0;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	e001      	b.n	8000dce <BMEReadRaw+0x82>
	}

	else return -1;
 8000dca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000030 	.word	0x20000030
 8000ddc:	20000068 	.word	0x20000068
 8000de0:	20000038 	.word	0x20000038
 8000de4:	20000034 	.word	0x20000034
 8000de8:	2000003c 	.word	0x2000003c

08000dec <BME280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b087      	sub	sp, #28
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	10da      	asrs	r2, r3, #3
 8000df8:	4b19      	ldr	r3, [pc, #100]	@ (8000e60 <BME280_compensate_T_int32+0x74>)
 8000dfa:	881b      	ldrh	r3, [r3, #0]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	1ad3      	subs	r3, r2, r3
 8000e00:	4a18      	ldr	r2, [pc, #96]	@ (8000e64 <BME280_compensate_T_int32+0x78>)
 8000e02:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e06:	fb02 f303 	mul.w	r3, r2, r3
 8000e0a:	12db      	asrs	r3, r3, #11
 8000e0c:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	111b      	asrs	r3, r3, #4
 8000e12:	4a13      	ldr	r2, [pc, #76]	@ (8000e60 <BME280_compensate_T_int32+0x74>)
 8000e14:	8812      	ldrh	r2, [r2, #0]
 8000e16:	1a9b      	subs	r3, r3, r2
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	1112      	asrs	r2, r2, #4
 8000e1c:	4910      	ldr	r1, [pc, #64]	@ (8000e60 <BME280_compensate_T_int32+0x74>)
 8000e1e:	8809      	ldrh	r1, [r1, #0]
 8000e20:	1a52      	subs	r2, r2, r1
 8000e22:	fb02 f303 	mul.w	r3, r2, r3
 8000e26:	131b      	asrs	r3, r3, #12
 8000e28:	4a0f      	ldr	r2, [pc, #60]	@ (8000e68 <BME280_compensate_T_int32+0x7c>)
 8000e2a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e2e:	fb02 f303 	mul.w	r3, r2, r3
 8000e32:	139b      	asrs	r3, r3, #14
 8000e34:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8000e36:	697a      	ldr	r2, [r7, #20]
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	4a0b      	ldr	r2, [pc, #44]	@ (8000e6c <BME280_compensate_T_int32+0x80>)
 8000e3e:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8000e40:	4b0a      	ldr	r3, [pc, #40]	@ (8000e6c <BME280_compensate_T_int32+0x80>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4613      	mov	r3, r2
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	4413      	add	r3, r2
 8000e4a:	3380      	adds	r3, #128	@ 0x80
 8000e4c:	121b      	asrs	r3, r3, #8
 8000e4e:	60fb      	str	r3, [r7, #12]
	return T;
 8000e50:	68fb      	ldr	r3, [r7, #12]
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	371c      	adds	r7, #28
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	20000040 	.word	0x20000040
 8000e64:	20000048 	.word	0x20000048
 8000e68:	2000004a 	.word	0x2000004a
 8000e6c:	20000064 	.word	0x20000064

08000e70 <BME280_compensate_P_int32>:
}

#elif SUPPORT_32BIT
// Returns pressure in Pa as unsigned 32 bit integer. Output value of “96386” equals 96386 Pa = 963.86 hPa
uint32_t BME280_compensate_P_int32(int32_t adc_P)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b087      	sub	sp, #28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
	int32_t var1, var2;
	uint32_t p;
	var1 = (((int32_t)t_fine)>>1) - (int32_t)64000;
 8000e78:	4b4a      	ldr	r3, [pc, #296]	@ (8000fa4 <BME280_compensate_P_int32+0x134>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	105b      	asrs	r3, r3, #1
 8000e7e:	f5a3 437a 	sub.w	r3, r3, #64000	@ 0xfa00
 8000e82:	613b      	str	r3, [r7, #16]
	var2 = (((var1>>2) * (var1>>2)) >> 11 ) * ((int32_t)dig_P6);
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	109b      	asrs	r3, r3, #2
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	1092      	asrs	r2, r2, #2
 8000e8c:	fb02 f303 	mul.w	r3, r2, r3
 8000e90:	12db      	asrs	r3, r3, #11
 8000e92:	4a45      	ldr	r2, [pc, #276]	@ (8000fa8 <BME280_compensate_P_int32+0x138>)
 8000e94:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e98:	fb02 f303 	mul.w	r3, r2, r3
 8000e9c:	60fb      	str	r3, [r7, #12]
	var2 = var2 + ((var1*((int32_t)dig_P5))<<1);
 8000e9e:	4b43      	ldr	r3, [pc, #268]	@ (8000fac <BME280_compensate_P_int32+0x13c>)
 8000ea0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	fb02 f303 	mul.w	r3, r2, r3
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	68fa      	ldr	r2, [r7, #12]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	60fb      	str	r3, [r7, #12]
	var2 = (var2>>2)+(((int32_t)dig_P4)<<16);
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	109a      	asrs	r2, r3, #2
 8000eb8:	4b3d      	ldr	r3, [pc, #244]	@ (8000fb0 <BME280_compensate_P_int32+0x140>)
 8000eba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ebe:	041b      	lsls	r3, r3, #16
 8000ec0:	4413      	add	r3, r2
 8000ec2:	60fb      	str	r3, [r7, #12]
	var1 = (((dig_P3 * (((var1>>2) * (var1>>2)) >> 13 )) >> 3) + ((((int32_t)dig_P2) *var1)>>1))>>18;
 8000ec4:	4b3b      	ldr	r3, [pc, #236]	@ (8000fb4 <BME280_compensate_P_int32+0x144>)
 8000ec6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eca:	4619      	mov	r1, r3
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	109b      	asrs	r3, r3, #2
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	1092      	asrs	r2, r2, #2
 8000ed4:	fb02 f303 	mul.w	r3, r2, r3
 8000ed8:	135b      	asrs	r3, r3, #13
 8000eda:	fb01 f303 	mul.w	r3, r1, r3
 8000ede:	10da      	asrs	r2, r3, #3
 8000ee0:	4b35      	ldr	r3, [pc, #212]	@ (8000fb8 <BME280_compensate_P_int32+0x148>)
 8000ee2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	fb01 f303 	mul.w	r3, r1, r3
 8000eee:	105b      	asrs	r3, r3, #1
 8000ef0:	4413      	add	r3, r2
 8000ef2:	149b      	asrs	r3, r3, #18
 8000ef4:	613b      	str	r3, [r7, #16]
	var1 =((((32768+var1))*((int32_t)dig_P1))>>15);
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8000efc:	4a2f      	ldr	r2, [pc, #188]	@ (8000fbc <BME280_compensate_P_int32+0x14c>)
 8000efe:	8812      	ldrh	r2, [r2, #0]
 8000f00:	fb02 f303 	mul.w	r3, r2, r3
 8000f04:	13db      	asrs	r3, r3, #15
 8000f06:	613b      	str	r3, [r7, #16]
	if (var1 == 0)
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d101      	bne.n	8000f12 <BME280_compensate_P_int32+0xa2>
	{
		return 0; // avoid exception caused by division by zero
 8000f0e:	2300      	movs	r3, #0
 8000f10:	e041      	b.n	8000f96 <BME280_compensate_P_int32+0x126>
	}
	p = (((uint32_t)(((int32_t)1048576)-adc_P)-(var2>>12)))*3125;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	131b      	asrs	r3, r3, #12
 8000f16:	461a      	mov	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	4a28      	ldr	r2, [pc, #160]	@ (8000fc0 <BME280_compensate_P_int32+0x150>)
 8000f1e:	fb02 f303 	mul.w	r3, r2, r3
 8000f22:	f103 4343 	add.w	r3, r3, #3271557120	@ 0xc3000000
 8000f26:	f503 03a0 	add.w	r3, r3, #5242880	@ 0x500000
 8000f2a:	617b      	str	r3, [r7, #20]
	if (p < 0x80000000)
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	db06      	blt.n	8000f40 <BME280_compensate_P_int32+0xd0>
	{
		p = (p << 1) / ((uint32_t)var1);
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	005a      	lsls	r2, r3, #1
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f3c:	617b      	str	r3, [r7, #20]
 8000f3e:	e005      	b.n	8000f4c <BME280_compensate_P_int32+0xdc>
	}
	else
	{
		p = (p / (uint32_t)var1) * 2;
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	697a      	ldr	r2, [r7, #20]
 8000f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	617b      	str	r3, [r7, #20]
	}
	var1 = (((int32_t)dig_P9) * ((int32_t)(((p>>3) * (p>>3))>>13)))>>12;
 8000f4c:	4b1d      	ldr	r3, [pc, #116]	@ (8000fc4 <BME280_compensate_P_int32+0x154>)
 8000f4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f52:	4619      	mov	r1, r3
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	08db      	lsrs	r3, r3, #3
 8000f58:	697a      	ldr	r2, [r7, #20]
 8000f5a:	08d2      	lsrs	r2, r2, #3
 8000f5c:	fb02 f303 	mul.w	r3, r2, r3
 8000f60:	0b5b      	lsrs	r3, r3, #13
 8000f62:	fb01 f303 	mul.w	r3, r1, r3
 8000f66:	131b      	asrs	r3, r3, #12
 8000f68:	613b      	str	r3, [r7, #16]
	var2 = (((int32_t)(p>>2)) * ((int32_t)dig_P8))>>13;
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	089b      	lsrs	r3, r3, #2
 8000f6e:	461a      	mov	r2, r3
 8000f70:	4b15      	ldr	r3, [pc, #84]	@ (8000fc8 <BME280_compensate_P_int32+0x158>)
 8000f72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f76:	fb02 f303 	mul.w	r3, r2, r3
 8000f7a:	135b      	asrs	r3, r3, #13
 8000f7c:	60fb      	str	r3, [r7, #12]
	p = (uint32_t)((int32_t)p + ((var1 + var2 + dig_P7) >> 4));
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	4413      	add	r3, r2
 8000f84:	4a11      	ldr	r2, [pc, #68]	@ (8000fcc <BME280_compensate_P_int32+0x15c>)
 8000f86:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	111a      	asrs	r2, r3, #4
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	4413      	add	r3, r2
 8000f92:	617b      	str	r3, [r7, #20]
	return p;
 8000f94:	697b      	ldr	r3, [r7, #20]
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	371c      	adds	r7, #28
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	20000064 	.word	0x20000064
 8000fa8:	20000054 	.word	0x20000054
 8000fac:	20000052 	.word	0x20000052
 8000fb0:	20000050 	.word	0x20000050
 8000fb4:	2000004e 	.word	0x2000004e
 8000fb8:	2000004c 	.word	0x2000004c
 8000fbc:	20000042 	.word	0x20000042
 8000fc0:	fffff3cb 	.word	0xfffff3cb
 8000fc4:	2000005a 	.word	0x2000005a
 8000fc8:	20000058 	.word	0x20000058
 8000fcc:	20000056 	.word	0x20000056

08000fd0 <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 8000fd8:	4b2c      	ldr	r3, [pc, #176]	@ (800108c <bme280_compensate_H_int32+0xbc>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8000fe0:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	039a      	lsls	r2, r3, #14
 8000fe6:	4b2a      	ldr	r3, [pc, #168]	@ (8001090 <bme280_compensate_H_int32+0xc0>)
 8000fe8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fec:	051b      	lsls	r3, r3, #20
 8000fee:	1ad2      	subs	r2, r2, r3
 8000ff0:	4b28      	ldr	r3, [pc, #160]	@ (8001094 <bme280_compensate_H_int32+0xc4>)
 8000ff2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	fb01 f303 	mul.w	r3, r1, r3
 8000ffe:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001000:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001004:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001006:	4a24      	ldr	r2, [pc, #144]	@ (8001098 <bme280_compensate_H_int32+0xc8>)
 8001008:	f9b2 2000 	ldrsh.w	r2, [r2]
 800100c:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 800100e:	68fa      	ldr	r2, [r7, #12]
 8001010:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001014:	1292      	asrs	r2, r2, #10
 8001016:	4921      	ldr	r1, [pc, #132]	@ (800109c <bme280_compensate_H_int32+0xcc>)
 8001018:	8809      	ldrh	r1, [r1, #0]
 800101a:	4608      	mov	r0, r1
 800101c:	68f9      	ldr	r1, [r7, #12]
 800101e:	fb00 f101 	mul.w	r1, r0, r1
 8001022:	12c9      	asrs	r1, r1, #11
 8001024:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8001028:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 800102c:	1292      	asrs	r2, r2, #10
 800102e:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8001032:	491b      	ldr	r1, [pc, #108]	@ (80010a0 <bme280_compensate_H_int32+0xd0>)
 8001034:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001038:	fb01 f202 	mul.w	r2, r1, r2
 800103c:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
					8192) >> 14));
 8001040:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001042:	fb02 f303 	mul.w	r3, r2, r3
 8001046:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	13db      	asrs	r3, r3, #15
 800104c:	68fa      	ldr	r2, [r7, #12]
 800104e:	13d2      	asrs	r2, r2, #15
 8001050:	fb02 f303 	mul.w	r3, r2, r3
 8001054:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 8001056:	4a13      	ldr	r2, [pc, #76]	@ (80010a4 <bme280_compensate_H_int32+0xd4>)
 8001058:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 800105a:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 800105e:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001060:	68fa      	ldr	r2, [r7, #12]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800106c:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001074:	bfa8      	it	ge
 8001076:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 800107a:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	131b      	asrs	r3, r3, #12
}
 8001080:	4618      	mov	r0, r3
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	20000064 	.word	0x20000064
 8001090:	2000005e 	.word	0x2000005e
 8001094:	20000060 	.word	0x20000060
 8001098:	20000062 	.word	0x20000062
 800109c:	20000046 	.word	0x20000046
 80010a0:	2000005c 	.word	0x2000005c
 80010a4:	20000044 	.word	0x20000044

080010a8 <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure (void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 80010ac:	f7ff fe4e 	bl	8000d4c <BMEReadRaw>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d158      	bne.n	8001168 <BME280_Measure+0xc0>
	{
		  if (tRaw == 0x800000) Temperature = 0; // value in case temp measurement was disabled
 80010b6:	4b33      	ldr	r3, [pc, #204]	@ (8001184 <BME280_Measure+0xdc>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80010be:	d104      	bne.n	80010ca <BME280_Measure+0x22>
 80010c0:	4b31      	ldr	r3, [pc, #196]	@ (8001188 <BME280_Measure+0xe0>)
 80010c2:	f04f 0200 	mov.w	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	e016      	b.n	80010f8 <BME280_Measure+0x50>
		  else
		  {
			  Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 80010ca:	4b2e      	ldr	r3, [pc, #184]	@ (8001184 <BME280_Measure+0xdc>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fe8c 	bl	8000dec <BME280_compensate_T_int32>
 80010d4:	4603      	mov	r3, r0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff f9a2 	bl	8000420 <__aeabi_i2d>
 80010dc:	f04f 0200 	mov.w	r2, #0
 80010e0:	4b2a      	ldr	r3, [pc, #168]	@ (800118c <BME280_Measure+0xe4>)
 80010e2:	f7ff fb31 	bl	8000748 <__aeabi_ddiv>
 80010e6:	4602      	mov	r2, r0
 80010e8:	460b      	mov	r3, r1
 80010ea:	4610      	mov	r0, r2
 80010ec:	4619      	mov	r1, r3
 80010ee:	f7ff fc13 	bl	8000918 <__aeabi_d2f>
 80010f2:	4603      	mov	r3, r0
 80010f4:	4a24      	ldr	r2, [pc, #144]	@ (8001188 <BME280_Measure+0xe0>)
 80010f6:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 80010f8:	4b25      	ldr	r3, [pc, #148]	@ (8001190 <BME280_Measure+0xe8>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001100:	d104      	bne.n	800110c <BME280_Measure+0x64>
 8001102:	4b24      	ldr	r3, [pc, #144]	@ (8001194 <BME280_Measure+0xec>)
 8001104:	f04f 0200 	mov.w	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	e00b      	b.n	8001124 <BME280_Measure+0x7c>
		  {
#if SUPPORT_64BIT
			  Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256

#elif SUPPORT_32BIT
			  Pressure = (BME280_compensate_P_int32 (pRaw));  // as per datasheet, the pressure is Pa
 800110c:	4b20      	ldr	r3, [pc, #128]	@ (8001190 <BME280_Measure+0xe8>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff fead 	bl	8000e70 <BME280_compensate_P_int32>
 8001116:	ee07 0a90 	vmov	s15, r0
 800111a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800111e:	4b1d      	ldr	r3, [pc, #116]	@ (8001194 <BME280_Measure+0xec>)
 8001120:	edc3 7a00 	vstr	s15, [r3]

#endif
		  }

		  if (hRaw == 0x8000) Humidity = 0; // value in case temp measurement was disabled
 8001124:	4b1c      	ldr	r3, [pc, #112]	@ (8001198 <BME280_Measure+0xf0>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800112c:	d104      	bne.n	8001138 <BME280_Measure+0x90>
 800112e:	4b1b      	ldr	r3, [pc, #108]	@ (800119c <BME280_Measure+0xf4>)
 8001130:	f04f 0200 	mov.w	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
	// if the device is detached
	else
	{
		Temperature = Pressure = Humidity = 0;
	}
}
 8001136:	e023      	b.n	8001180 <BME280_Measure+0xd8>
			  Humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8001138:	4b17      	ldr	r3, [pc, #92]	@ (8001198 <BME280_Measure+0xf0>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff47 	bl	8000fd0 <bme280_compensate_H_int32>
 8001142:	4603      	mov	r3, r0
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff f95b 	bl	8000400 <__aeabi_ui2d>
 800114a:	f04f 0200 	mov.w	r2, #0
 800114e:	4b14      	ldr	r3, [pc, #80]	@ (80011a0 <BME280_Measure+0xf8>)
 8001150:	f7ff fafa 	bl	8000748 <__aeabi_ddiv>
 8001154:	4602      	mov	r2, r0
 8001156:	460b      	mov	r3, r1
 8001158:	4610      	mov	r0, r2
 800115a:	4619      	mov	r1, r3
 800115c:	f7ff fbdc 	bl	8000918 <__aeabi_d2f>
 8001160:	4603      	mov	r3, r0
 8001162:	4a0e      	ldr	r2, [pc, #56]	@ (800119c <BME280_Measure+0xf4>)
 8001164:	6013      	str	r3, [r2, #0]
}
 8001166:	e00b      	b.n	8001180 <BME280_Measure+0xd8>
		Temperature = Pressure = Humidity = 0;
 8001168:	4b0c      	ldr	r3, [pc, #48]	@ (800119c <BME280_Measure+0xf4>)
 800116a:	f04f 0200 	mov.w	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	4b0a      	ldr	r3, [pc, #40]	@ (800119c <BME280_Measure+0xf4>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a07      	ldr	r2, [pc, #28]	@ (8001194 <BME280_Measure+0xec>)
 8001176:	6013      	str	r3, [r2, #0]
 8001178:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <BME280_Measure+0xec>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a02      	ldr	r2, [pc, #8]	@ (8001188 <BME280_Measure+0xe0>)
 800117e:	6013      	str	r3, [r2, #0]
}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20000034 	.word	0x20000034
 8001188:	200000bc 	.word	0x200000bc
 800118c:	40590000 	.word	0x40590000
 8001190:	20000038 	.word	0x20000038
 8001194:	200000c0 	.word	0x200000c0
 8001198:	2000003c 	.word	0x2000003c
 800119c:	200000c4 	.word	0x200000c4
 80011a0:	40900000 	.word	0x40900000

080011a4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80011ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011b0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80011b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80011bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011c0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4013      	ands	r3, r2
 80011c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011c8:	68fb      	ldr	r3, [r7, #12]
}
 80011ca:	bf00      	nop
 80011cc:	3714      	adds	r7, #20
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011dc:	f000 fa20 	bl	8001620 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011e0:	f000 f818 	bl	8001214 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80011e4:	f000 f872 	bl	80012cc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011e8:	f000 f8ce 	bl	8001388 <MX_GPIO_Init>
  MX_I2C1_Init();
 80011ec:	f000 f88c 	bl	8001308 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 80011f0:	2304      	movs	r3, #4
 80011f2:	9301      	str	r3, [sp, #4]
 80011f4:	2300      	movs	r3, #0
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	2303      	movs	r3, #3
 80011fa:	2201      	movs	r2, #1
 80011fc:	2105      	movs	r1, #5
 80011fe:	2002      	movs	r0, #2
 8001200:	f7ff fccc 	bl	8000b9c <BME280_Config>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    BME280_Measure();
 8001204:	f7ff ff50 	bl	80010a8 <BME280_Measure>
	HAL_Delay(10000);
 8001208:	f242 7010 	movw	r0, #10000	@ 0x2710
 800120c:	f000 fa8e 	bl	800172c <HAL_Delay>
    BME280_Measure();
 8001210:	bf00      	nop
 8001212:	e7f7      	b.n	8001204 <main+0x2e>

08001214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b09a      	sub	sp, #104	@ 0x68
 8001218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800121a:	f107 0320 	add.w	r3, r7, #32
 800121e:	2248      	movs	r2, #72	@ 0x48
 8001220:	2100      	movs	r1, #0
 8001222:	4618      	mov	r0, r3
 8001224:	f003 f8a8 	bl	8004378 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
 8001232:	60da      	str	r2, [r3, #12]
 8001234:	611a      	str	r2, [r3, #16]
 8001236:	615a      	str	r2, [r3, #20]
 8001238:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800123a:	4b23      	ldr	r3, [pc, #140]	@ (80012c8 <SystemClock_Config+0xb4>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001242:	4a21      	ldr	r2, [pc, #132]	@ (80012c8 <SystemClock_Config+0xb4>)
 8001244:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001248:	6013      	str	r3, [r2, #0]
 800124a:	4b1f      	ldr	r3, [pc, #124]	@ (80012c8 <SystemClock_Config+0xb4>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001252:	603b      	str	r3, [r7, #0]
 8001254:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001256:	2323      	movs	r3, #35	@ 0x23
 8001258:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800125a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800125e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001260:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001264:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001266:	2301      	movs	r3, #1
 8001268:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800126a:	2340      	movs	r3, #64	@ 0x40
 800126c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800126e:	2300      	movs	r3, #0
 8001270:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001272:	2360      	movs	r3, #96	@ 0x60
 8001274:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001276:	2300      	movs	r3, #0
 8001278:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800127a:	f107 0320 	add.w	r3, r7, #32
 800127e:	4618      	mov	r0, r3
 8001280:	f001 fe6c 	bl	8002f5c <HAL_RCC_OscConfig>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800128a:	f000 f887 	bl	800139c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800128e:	236f      	movs	r3, #111	@ 0x6f
 8001290:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001292:	2300      	movs	r3, #0
 8001294:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800129a:	2300      	movs	r3, #0
 800129c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800129e:	2300      	movs	r3, #0
 80012a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	2100      	movs	r1, #0
 80012ae:	4618      	mov	r0, r3
 80012b0:	f002 f9c8 	bl	8003644 <HAL_RCC_ClockConfig>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80012ba:	f000 f86f 	bl	800139c <Error_Handler>
  }
}
 80012be:	bf00      	nop
 80012c0:	3768      	adds	r7, #104	@ 0x68
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	58000400 	.word	0x58000400

080012cc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b094      	sub	sp, #80	@ 0x50
 80012d0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012d2:	463b      	mov	r3, r7
 80012d4:	2250      	movs	r2, #80	@ 0x50
 80012d6:	2100      	movs	r1, #0
 80012d8:	4618      	mov	r0, r3
 80012da:	f003 f84d 	bl	8004378 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80012de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012e2:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80012e4:	2300      	movs	r3, #0
 80012e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80012e8:	2310      	movs	r3, #16
 80012ea:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ec:	463b      	mov	r3, r7
 80012ee:	4618      	mov	r0, r3
 80012f0:	f002 fdbb 	bl	8003e6a <HAL_RCCEx_PeriphCLKConfig>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80012fa:	f000 f84f 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80012fe:	bf00      	nop
 8001300:	3750      	adds	r7, #80	@ 0x50
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800130c:	4b1b      	ldr	r3, [pc, #108]	@ (800137c <MX_I2C1_Init+0x74>)
 800130e:	4a1c      	ldr	r2, [pc, #112]	@ (8001380 <MX_I2C1_Init+0x78>)
 8001310:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100D14;
 8001312:	4b1a      	ldr	r3, [pc, #104]	@ (800137c <MX_I2C1_Init+0x74>)
 8001314:	4a1b      	ldr	r2, [pc, #108]	@ (8001384 <MX_I2C1_Init+0x7c>)
 8001316:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001318:	4b18      	ldr	r3, [pc, #96]	@ (800137c <MX_I2C1_Init+0x74>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800131e:	4b17      	ldr	r3, [pc, #92]	@ (800137c <MX_I2C1_Init+0x74>)
 8001320:	2201      	movs	r2, #1
 8001322:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001324:	4b15      	ldr	r3, [pc, #84]	@ (800137c <MX_I2C1_Init+0x74>)
 8001326:	2200      	movs	r2, #0
 8001328:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800132a:	4b14      	ldr	r3, [pc, #80]	@ (800137c <MX_I2C1_Init+0x74>)
 800132c:	2200      	movs	r2, #0
 800132e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001330:	4b12      	ldr	r3, [pc, #72]	@ (800137c <MX_I2C1_Init+0x74>)
 8001332:	2200      	movs	r2, #0
 8001334:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001336:	4b11      	ldr	r3, [pc, #68]	@ (800137c <MX_I2C1_Init+0x74>)
 8001338:	2200      	movs	r2, #0
 800133a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800133c:	4b0f      	ldr	r3, [pc, #60]	@ (800137c <MX_I2C1_Init+0x74>)
 800133e:	2200      	movs	r2, #0
 8001340:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001342:	480e      	ldr	r0, [pc, #56]	@ (800137c <MX_I2C1_Init+0x74>)
 8001344:	f000 fc6a 	bl	8001c1c <HAL_I2C_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800134e:	f000 f825 	bl	800139c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001352:	2100      	movs	r1, #0
 8001354:	4809      	ldr	r0, [pc, #36]	@ (800137c <MX_I2C1_Init+0x74>)
 8001356:	f001 f9ed 	bl	8002734 <HAL_I2CEx_ConfigAnalogFilter>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001360:	f000 f81c 	bl	800139c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001364:	2100      	movs	r1, #0
 8001366:	4805      	ldr	r0, [pc, #20]	@ (800137c <MX_I2C1_Init+0x74>)
 8001368:	f001 fa2f 	bl	80027ca <HAL_I2CEx_ConfigDigitalFilter>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001372:	f000 f813 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000068 	.word	0x20000068
 8001380:	40005400 	.word	0x40005400
 8001384:	00100d14 	.word	0x00100d14

08001388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800138c:	2004      	movs	r0, #4
 800138e:	f7ff ff09 	bl	80011a4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001392:	2002      	movs	r0, #2
 8001394:	f7ff ff06 	bl	80011a4 <LL_AHB2_GRP1_EnableClock>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}

0800139c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a0:	b672      	cpsid	i
}
 80013a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013a4:	bf00      	nop
 80013a6:	e7fd      	b.n	80013a4 <Error_Handler+0x8>

080013a8 <LL_AHB2_GRP1_EnableClock>:
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80013b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013b4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80013b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4313      	orrs	r3, r2
 80013be:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80013c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013c4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4013      	ands	r3, r2
 80013ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013cc:	68fb      	ldr	r3, [r7, #12]
}
 80013ce:	bf00      	nop
 80013d0:	3714      	adds	r7, #20
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80013da:	b480      	push	{r7}
 80013dc:	b085      	sub	sp, #20
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80013e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013e6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80013e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80013f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013f6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4013      	ands	r3, r2
 80013fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013fe:	68fb      	ldr	r3, [r7, #12]
}
 8001400:	bf00      	nop
 8001402:	3714      	adds	r7, #20
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
	...

0800141c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b09c      	sub	sp, #112	@ 0x70
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001434:	f107 030c 	add.w	r3, r7, #12
 8001438:	2250      	movs	r2, #80	@ 0x50
 800143a:	2100      	movs	r1, #0
 800143c:	4618      	mov	r0, r3
 800143e:	f002 ff9b 	bl	8004378 <memset>
  if(hi2c->Instance==I2C1)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a16      	ldr	r2, [pc, #88]	@ (80014a0 <HAL_I2C_MspInit+0x84>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d125      	bne.n	8001498 <HAL_I2C_MspInit+0x7c>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800144c:	2304      	movs	r3, #4
 800144e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001450:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001454:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001456:	f107 030c 	add.w	r3, r7, #12
 800145a:	4618      	mov	r0, r3
 800145c:	f002 fd05 	bl	8003e6a <HAL_RCCEx_PeriphCLKConfig>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001466:	f7ff ff99 	bl	800139c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800146a:	2002      	movs	r0, #2
 800146c:	f7ff ff9c 	bl	80013a8 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001470:	23c0      	movs	r3, #192	@ 0xc0
 8001472:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001474:	2312      	movs	r3, #18
 8001476:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147c:	2300      	movs	r3, #0
 800147e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001480:	2304      	movs	r3, #4
 8001482:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001484:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001488:	4619      	mov	r1, r3
 800148a:	4806      	ldr	r0, [pc, #24]	@ (80014a4 <HAL_I2C_MspInit+0x88>)
 800148c:	f000 fa56 	bl	800193c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001490:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8001494:	f7ff ffa1 	bl	80013da <LL_APB1_GRP1_EnableClock>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001498:	bf00      	nop
 800149a:	3770      	adds	r7, #112	@ 0x70
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40005400 	.word	0x40005400
 80014a4:	48000400 	.word	0x48000400

080014a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014ac:	bf00      	nop
 80014ae:	e7fd      	b.n	80014ac <NMI_Handler+0x4>

080014b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014b4:	bf00      	nop
 80014b6:	e7fd      	b.n	80014b4 <HardFault_Handler+0x4>

080014b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014bc:	bf00      	nop
 80014be:	e7fd      	b.n	80014bc <MemManage_Handler+0x4>

080014c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c4:	bf00      	nop
 80014c6:	e7fd      	b.n	80014c4 <BusFault_Handler+0x4>

080014c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014cc:	bf00      	nop
 80014ce:	e7fd      	b.n	80014cc <UsageFault_Handler+0x4>

080014d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014fe:	f000 f8e9 	bl	80016d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
	...

08001508 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800150c:	4b24      	ldr	r3, [pc, #144]	@ (80015a0 <SystemInit+0x98>)
 800150e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001512:	4a23      	ldr	r2, [pc, #140]	@ (80015a0 <SystemInit+0x98>)
 8001514:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001518:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800151c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001526:	f043 0301 	orr.w	r3, r3, #1
 800152a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800152c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001530:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8001534:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001536:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001540:	4b18      	ldr	r3, [pc, #96]	@ (80015a4 <SystemInit+0x9c>)
 8001542:	4013      	ands	r3, r2
 8001544:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001546:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800154a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800154e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001552:	f023 0305 	bic.w	r3, r3, #5
 8001556:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800155a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800155e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001562:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001566:	f023 0301 	bic.w	r3, r3, #1
 800156a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800156e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001572:	4a0d      	ldr	r2, [pc, #52]	@ (80015a8 <SystemInit+0xa0>)
 8001574:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001576:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800157a:	4a0b      	ldr	r2, [pc, #44]	@ (80015a8 <SystemInit+0xa0>)
 800157c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800157e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001588:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800158c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800158e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001592:	2200      	movs	r2, #0
 8001594:	619a      	str	r2, [r3, #24]
}
 8001596:	bf00      	nop
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	e000ed00 	.word	0xe000ed00
 80015a4:	faf6fefb 	.word	0xfaf6fefb
 80015a8:	22041000 	.word	0x22041000

080015ac <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80015ac:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015ae:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015b0:	3304      	adds	r3, #4

080015b2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015b2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015b4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80015b6:	d3f9      	bcc.n	80015ac <CopyDataInit>
  bx lr
 80015b8:	4770      	bx	lr

080015ba <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80015ba:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80015bc:	3004      	adds	r0, #4

080015be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80015be:	4288      	cmp	r0, r1
  bcc FillZerobss
 80015c0:	d3fb      	bcc.n	80015ba <FillZerobss>
  bx lr
 80015c2:	4770      	bx	lr

080015c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015c4:	480c      	ldr	r0, [pc, #48]	@ (80015f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80015c8:	f7ff ff9e 	bl	8001508 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80015cc:	480b      	ldr	r0, [pc, #44]	@ (80015fc <LoopForever+0x6>)
 80015ce:	490c      	ldr	r1, [pc, #48]	@ (8001600 <LoopForever+0xa>)
 80015d0:	4a0c      	ldr	r2, [pc, #48]	@ (8001604 <LoopForever+0xe>)
 80015d2:	2300      	movs	r3, #0
 80015d4:	f7ff ffed 	bl	80015b2 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80015d8:	480b      	ldr	r0, [pc, #44]	@ (8001608 <LoopForever+0x12>)
 80015da:	490c      	ldr	r1, [pc, #48]	@ (800160c <LoopForever+0x16>)
 80015dc:	4a0c      	ldr	r2, [pc, #48]	@ (8001610 <LoopForever+0x1a>)
 80015de:	2300      	movs	r3, #0
 80015e0:	f7ff ffe7 	bl	80015b2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80015e4:	480b      	ldr	r0, [pc, #44]	@ (8001614 <LoopForever+0x1e>)
 80015e6:	490c      	ldr	r1, [pc, #48]	@ (8001618 <LoopForever+0x22>)
 80015e8:	2300      	movs	r3, #0
 80015ea:	f7ff ffe8 	bl	80015be <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80015ee:	f002 fecb 	bl	8004388 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80015f2:	f7ff fdf0 	bl	80011d6 <main>

080015f6 <LoopForever>:

LoopForever:
  b LoopForever
 80015f6:	e7fe      	b.n	80015f6 <LoopForever>
  ldr   r0, =_estack
 80015f8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80015fc:	20000008 	.word	0x20000008
 8001600:	20000014 	.word	0x20000014
 8001604:	0800449c 	.word	0x0800449c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001608:	20030000 	.word	0x20030000
 800160c:	20030000 	.word	0x20030000
 8001610:	080044a8 	.word	0x080044a8
  INIT_BSS _sbss, _ebss
 8001614:	20000014 	.word	0x20000014
 8001618:	200000cc 	.word	0x200000cc

0800161c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800161c:	e7fe      	b.n	800161c <ADC1_IRQHandler>
	...

08001620 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001626:	2300      	movs	r3, #0
 8001628:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800162a:	4b0c      	ldr	r3, [pc, #48]	@ (800165c <HAL_Init+0x3c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a0b      	ldr	r2, [pc, #44]	@ (800165c <HAL_Init+0x3c>)
 8001630:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001634:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001636:	2003      	movs	r0, #3
 8001638:	f000 f94e 	bl	80018d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800163c:	200f      	movs	r0, #15
 800163e:	f000 f80f 	bl	8001660 <HAL_InitTick>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d002      	beq.n	800164e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	71fb      	strb	r3, [r7, #7]
 800164c:	e001      	b.n	8001652 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800164e:	f7ff fedd 	bl	800140c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001652:	79fb      	ldrb	r3, [r7, #7]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	58004000 	.word	0x58004000

08001660 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001668:	2300      	movs	r3, #0
 800166a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800166c:	4b17      	ldr	r3, [pc, #92]	@ (80016cc <HAL_InitTick+0x6c>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d024      	beq.n	80016be <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001674:	f002 f994 	bl	80039a0 <HAL_RCC_GetHCLKFreq>
 8001678:	4602      	mov	r2, r0
 800167a:	4b14      	ldr	r3, [pc, #80]	@ (80016cc <HAL_InitTick+0x6c>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	4619      	mov	r1, r3
 8001680:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001684:	fbb3 f3f1 	udiv	r3, r3, r1
 8001688:	fbb2 f3f3 	udiv	r3, r2, r3
 800168c:	4618      	mov	r0, r3
 800168e:	f000 f948 	bl	8001922 <HAL_SYSTICK_Config>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d10f      	bne.n	80016b8 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b0f      	cmp	r3, #15
 800169c:	d809      	bhi.n	80016b2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800169e:	2200      	movs	r2, #0
 80016a0:	6879      	ldr	r1, [r7, #4]
 80016a2:	f04f 30ff 	mov.w	r0, #4294967295
 80016a6:	f000 f922 	bl	80018ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016aa:	4a09      	ldr	r2, [pc, #36]	@ (80016d0 <HAL_InitTick+0x70>)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6013      	str	r3, [r2, #0]
 80016b0:	e007      	b.n	80016c2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	73fb      	strb	r3, [r7, #15]
 80016b6:	e004      	b.n	80016c2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	73fb      	strb	r3, [r7, #15]
 80016bc:	e001      	b.n	80016c2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20000010 	.word	0x20000010
 80016d0:	2000000c 	.word	0x2000000c

080016d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016d8:	4b06      	ldr	r3, [pc, #24]	@ (80016f4 <HAL_IncTick+0x20>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	461a      	mov	r2, r3
 80016de:	4b06      	ldr	r3, [pc, #24]	@ (80016f8 <HAL_IncTick+0x24>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4413      	add	r3, r2
 80016e4:	4a04      	ldr	r2, [pc, #16]	@ (80016f8 <HAL_IncTick+0x24>)
 80016e6:	6013      	str	r3, [r2, #0]
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	20000010 	.word	0x20000010
 80016f8:	200000c8 	.word	0x200000c8

080016fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001700:	4b03      	ldr	r3, [pc, #12]	@ (8001710 <HAL_GetTick+0x14>)
 8001702:	681b      	ldr	r3, [r3, #0]
}
 8001704:	4618      	mov	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	200000c8 	.word	0x200000c8

08001714 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001718:	4b03      	ldr	r3, [pc, #12]	@ (8001728 <HAL_GetTickPrio+0x14>)
 800171a:	681b      	ldr	r3, [r3, #0]
}
 800171c:	4618      	mov	r0, r3
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	2000000c 	.word	0x2000000c

0800172c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001734:	f7ff ffe2 	bl	80016fc <HAL_GetTick>
 8001738:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001744:	d005      	beq.n	8001752 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001746:	4b0a      	ldr	r3, [pc, #40]	@ (8001770 <HAL_Delay+0x44>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	461a      	mov	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	4413      	add	r3, r2
 8001750:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001752:	bf00      	nop
 8001754:	f7ff ffd2 	bl	80016fc <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	429a      	cmp	r2, r3
 8001762:	d8f7      	bhi.n	8001754 <HAL_Delay+0x28>
  {
  }
}
 8001764:	bf00      	nop
 8001766:	bf00      	nop
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20000010 	.word	0x20000010

08001774 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001784:	4b0c      	ldr	r3, [pc, #48]	@ (80017b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001790:	4013      	ands	r3, r2
 8001792:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800179c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017a6:	4a04      	ldr	r2, [pc, #16]	@ (80017b8 <__NVIC_SetPriorityGrouping+0x44>)
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	60d3      	str	r3, [r2, #12]
}
 80017ac:	bf00      	nop
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c0:	4b04      	ldr	r3, [pc, #16]	@ (80017d4 <__NVIC_GetPriorityGrouping+0x18>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	0a1b      	lsrs	r3, r3, #8
 80017c6:	f003 0307 	and.w	r3, r3, #7
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	6039      	str	r1, [r7, #0]
 80017e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	db0a      	blt.n	8001802 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	b2da      	uxtb	r2, r3
 80017f0:	490c      	ldr	r1, [pc, #48]	@ (8001824 <__NVIC_SetPriority+0x4c>)
 80017f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f6:	0112      	lsls	r2, r2, #4
 80017f8:	b2d2      	uxtb	r2, r2
 80017fa:	440b      	add	r3, r1
 80017fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001800:	e00a      	b.n	8001818 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	b2da      	uxtb	r2, r3
 8001806:	4908      	ldr	r1, [pc, #32]	@ (8001828 <__NVIC_SetPriority+0x50>)
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	f003 030f 	and.w	r3, r3, #15
 800180e:	3b04      	subs	r3, #4
 8001810:	0112      	lsls	r2, r2, #4
 8001812:	b2d2      	uxtb	r2, r2
 8001814:	440b      	add	r3, r1
 8001816:	761a      	strb	r2, [r3, #24]
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	e000e100 	.word	0xe000e100
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800182c:	b480      	push	{r7}
 800182e:	b089      	sub	sp, #36	@ 0x24
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	f1c3 0307 	rsb	r3, r3, #7
 8001846:	2b04      	cmp	r3, #4
 8001848:	bf28      	it	cs
 800184a:	2304      	movcs	r3, #4
 800184c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	3304      	adds	r3, #4
 8001852:	2b06      	cmp	r3, #6
 8001854:	d902      	bls.n	800185c <NVIC_EncodePriority+0x30>
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	3b03      	subs	r3, #3
 800185a:	e000      	b.n	800185e <NVIC_EncodePriority+0x32>
 800185c:	2300      	movs	r3, #0
 800185e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001860:	f04f 32ff 	mov.w	r2, #4294967295
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43da      	mvns	r2, r3
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	401a      	ands	r2, r3
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001874:	f04f 31ff 	mov.w	r1, #4294967295
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	fa01 f303 	lsl.w	r3, r1, r3
 800187e:	43d9      	mvns	r1, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001884:	4313      	orrs	r3, r2
         );
}
 8001886:	4618      	mov	r0, r3
 8001888:	3724      	adds	r7, #36	@ 0x24
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
	...

08001894 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3b01      	subs	r3, #1
 80018a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018a4:	d301      	bcc.n	80018aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018a6:	2301      	movs	r3, #1
 80018a8:	e00f      	b.n	80018ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018aa:	4a0a      	ldr	r2, [pc, #40]	@ (80018d4 <SysTick_Config+0x40>)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	3b01      	subs	r3, #1
 80018b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018b2:	210f      	movs	r1, #15
 80018b4:	f04f 30ff 	mov.w	r0, #4294967295
 80018b8:	f7ff ff8e 	bl	80017d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018bc:	4b05      	ldr	r3, [pc, #20]	@ (80018d4 <SysTick_Config+0x40>)
 80018be:	2200      	movs	r2, #0
 80018c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018c2:	4b04      	ldr	r3, [pc, #16]	@ (80018d4 <SysTick_Config+0x40>)
 80018c4:	2207      	movs	r2, #7
 80018c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	e000e010 	.word	0xe000e010

080018d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f7ff ff47 	bl	8001774 <__NVIC_SetPriorityGrouping>
}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b086      	sub	sp, #24
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	4603      	mov	r3, r0
 80018f6:	60b9      	str	r1, [r7, #8]
 80018f8:	607a      	str	r2, [r7, #4]
 80018fa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018fc:	f7ff ff5e 	bl	80017bc <__NVIC_GetPriorityGrouping>
 8001900:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	68b9      	ldr	r1, [r7, #8]
 8001906:	6978      	ldr	r0, [r7, #20]
 8001908:	f7ff ff90 	bl	800182c <NVIC_EncodePriority>
 800190c:	4602      	mov	r2, r0
 800190e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001912:	4611      	mov	r1, r2
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff ff5f 	bl	80017d8 <__NVIC_SetPriority>
}
 800191a:	bf00      	nop
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f7ff ffb2 	bl	8001894 <SysTick_Config>
 8001930:	4603      	mov	r3, r0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
	...

0800193c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800193c:	b480      	push	{r7}
 800193e:	b087      	sub	sp, #28
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800194a:	e14c      	b.n	8001be6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	2101      	movs	r1, #1
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	fa01 f303 	lsl.w	r3, r1, r3
 8001958:	4013      	ands	r3, r2
 800195a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2b00      	cmp	r3, #0
 8001960:	f000 813e 	beq.w	8001be0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 0303 	and.w	r3, r3, #3
 800196c:	2b01      	cmp	r3, #1
 800196e:	d005      	beq.n	800197c <HAL_GPIO_Init+0x40>
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 0303 	and.w	r3, r3, #3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d130      	bne.n	80019de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	2203      	movs	r2, #3
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	43db      	mvns	r3, r3
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	4013      	ands	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	68da      	ldr	r2, [r3, #12]
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019b2:	2201      	movs	r2, #1
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	43db      	mvns	r3, r3
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	4013      	ands	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	091b      	lsrs	r3, r3, #4
 80019c8:	f003 0201 	and.w	r2, r3, #1
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f003 0303 	and.w	r3, r3, #3
 80019e6:	2b03      	cmp	r3, #3
 80019e8:	d017      	beq.n	8001a1a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	2203      	movs	r2, #3
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	43db      	mvns	r3, r3
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	4013      	ands	r3, r2
 8001a00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	689a      	ldr	r2, [r3, #8]
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f003 0303 	and.w	r3, r3, #3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d123      	bne.n	8001a6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	08da      	lsrs	r2, r3, #3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	3208      	adds	r2, #8
 8001a2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	220f      	movs	r2, #15
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	43db      	mvns	r3, r3
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	4013      	ands	r3, r2
 8001a48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	691a      	ldr	r2, [r3, #16]
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	f003 0307 	and.w	r3, r3, #7
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	08da      	lsrs	r2, r3, #3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3208      	adds	r2, #8
 8001a68:	6939      	ldr	r1, [r7, #16]
 8001a6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	2203      	movs	r2, #3
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	4013      	ands	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f003 0203 	and.w	r2, r3, #3
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f000 8098 	beq.w	8001be0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001ab0:	4a54      	ldr	r2, [pc, #336]	@ (8001c04 <HAL_GPIO_Init+0x2c8>)
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	089b      	lsrs	r3, r3, #2
 8001ab6:	3302      	adds	r3, #2
 8001ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001abc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	f003 0303 	and.w	r3, r3, #3
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	220f      	movs	r2, #15
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001ada:	d019      	beq.n	8001b10 <HAL_GPIO_Init+0x1d4>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4a4a      	ldr	r2, [pc, #296]	@ (8001c08 <HAL_GPIO_Init+0x2cc>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d013      	beq.n	8001b0c <HAL_GPIO_Init+0x1d0>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4a49      	ldr	r2, [pc, #292]	@ (8001c0c <HAL_GPIO_Init+0x2d0>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d00d      	beq.n	8001b08 <HAL_GPIO_Init+0x1cc>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4a48      	ldr	r2, [pc, #288]	@ (8001c10 <HAL_GPIO_Init+0x2d4>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d007      	beq.n	8001b04 <HAL_GPIO_Init+0x1c8>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4a47      	ldr	r2, [pc, #284]	@ (8001c14 <HAL_GPIO_Init+0x2d8>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d101      	bne.n	8001b00 <HAL_GPIO_Init+0x1c4>
 8001afc:	2304      	movs	r3, #4
 8001afe:	e008      	b.n	8001b12 <HAL_GPIO_Init+0x1d6>
 8001b00:	2307      	movs	r3, #7
 8001b02:	e006      	b.n	8001b12 <HAL_GPIO_Init+0x1d6>
 8001b04:	2303      	movs	r3, #3
 8001b06:	e004      	b.n	8001b12 <HAL_GPIO_Init+0x1d6>
 8001b08:	2302      	movs	r3, #2
 8001b0a:	e002      	b.n	8001b12 <HAL_GPIO_Init+0x1d6>
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e000      	b.n	8001b12 <HAL_GPIO_Init+0x1d6>
 8001b10:	2300      	movs	r3, #0
 8001b12:	697a      	ldr	r2, [r7, #20]
 8001b14:	f002 0203 	and.w	r2, r2, #3
 8001b18:	0092      	lsls	r2, r2, #2
 8001b1a:	4093      	lsls	r3, r2
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b22:	4938      	ldr	r1, [pc, #224]	@ (8001c04 <HAL_GPIO_Init+0x2c8>)
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	089b      	lsrs	r3, r3, #2
 8001b28:	3302      	adds	r3, #2
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b30:	4b39      	ldr	r3, [pc, #228]	@ (8001c18 <HAL_GPIO_Init+0x2dc>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b54:	4a30      	ldr	r2, [pc, #192]	@ (8001c18 <HAL_GPIO_Init+0x2dc>)
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001b5a:	4b2f      	ldr	r3, [pc, #188]	@ (8001c18 <HAL_GPIO_Init+0x2dc>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	43db      	mvns	r3, r3
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	4013      	ands	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b7e:	4a26      	ldr	r2, [pc, #152]	@ (8001c18 <HAL_GPIO_Init+0x2dc>)
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b84:	4b24      	ldr	r3, [pc, #144]	@ (8001c18 <HAL_GPIO_Init+0x2dc>)
 8001b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	4013      	ands	r3, r2
 8001b94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001baa:	4a1b      	ldr	r2, [pc, #108]	@ (8001c18 <HAL_GPIO_Init+0x2dc>)
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8001bb2:	4b19      	ldr	r3, [pc, #100]	@ (8001c18 <HAL_GPIO_Init+0x2dc>)
 8001bb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d003      	beq.n	8001bd8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bd8:	4a0f      	ldr	r2, [pc, #60]	@ (8001c18 <HAL_GPIO_Init+0x2dc>)
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	3301      	adds	r3, #1
 8001be4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f47f aeab 	bne.w	800194c <HAL_GPIO_Init+0x10>
  }
}
 8001bf6:	bf00      	nop
 8001bf8:	bf00      	nop
 8001bfa:	371c      	adds	r7, #28
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	40010000 	.word	0x40010000
 8001c08:	48000400 	.word	0x48000400
 8001c0c:	48000800 	.word	0x48000800
 8001c10:	48000c00 	.word	0x48000c00
 8001c14:	48001000 	.word	0x48001000
 8001c18:	58000800 	.word	0x58000800

08001c1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e08d      	b.n	8001d4a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d106      	bne.n	8001c48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f7ff fbea 	bl	800141c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2224      	movs	r2, #36	@ 0x24
 8001c4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f022 0201 	bic.w	r2, r2, #1
 8001c5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685a      	ldr	r2, [r3, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c6c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c7c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d107      	bne.n	8001c96 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	689a      	ldr	r2, [r3, #8]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	e006      	b.n	8001ca4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689a      	ldr	r2, [r3, #8]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001ca2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d108      	bne.n	8001cbe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	685a      	ldr	r2, [r3, #4]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001cba:	605a      	str	r2, [r3, #4]
 8001cbc:	e007      	b.n	8001cce <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ccc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	6812      	ldr	r2, [r2, #0]
 8001cd8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001cdc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ce0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68da      	ldr	r2, [r3, #12]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001cf0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	691a      	ldr	r2, [r3, #16]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	69d9      	ldr	r1, [r3, #28]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a1a      	ldr	r2, [r3, #32]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f042 0201 	orr.w	r2, r2, #1
 8001d2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2220      	movs	r2, #32
 8001d36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
	...

08001d54 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b088      	sub	sp, #32
 8001d58:	af02      	add	r7, sp, #8
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	4608      	mov	r0, r1
 8001d5e:	4611      	mov	r1, r2
 8001d60:	461a      	mov	r2, r3
 8001d62:	4603      	mov	r3, r0
 8001d64:	817b      	strh	r3, [r7, #10]
 8001d66:	460b      	mov	r3, r1
 8001d68:	813b      	strh	r3, [r7, #8]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b20      	cmp	r3, #32
 8001d78:	f040 80f9 	bne.w	8001f6e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d7c:	6a3b      	ldr	r3, [r7, #32]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d002      	beq.n	8001d88 <HAL_I2C_Mem_Write+0x34>
 8001d82:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d105      	bne.n	8001d94 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d8e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e0ed      	b.n	8001f70 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d101      	bne.n	8001da2 <HAL_I2C_Mem_Write+0x4e>
 8001d9e:	2302      	movs	r3, #2
 8001da0:	e0e6      	b.n	8001f70 <HAL_I2C_Mem_Write+0x21c>
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2201      	movs	r2, #1
 8001da6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001daa:	f7ff fca7 	bl	80016fc <HAL_GetTick>
 8001dae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	2319      	movs	r3, #25
 8001db6:	2201      	movs	r2, #1
 8001db8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001dbc:	68f8      	ldr	r0, [r7, #12]
 8001dbe:	f000 fac3 	bl	8002348 <I2C_WaitOnFlagUntilTimeout>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e0d1      	b.n	8001f70 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2221      	movs	r2, #33	@ 0x21
 8001dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2240      	movs	r2, #64	@ 0x40
 8001dd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2200      	movs	r2, #0
 8001de0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6a3a      	ldr	r2, [r7, #32]
 8001de6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001dec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2200      	movs	r2, #0
 8001df2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001df4:	88f8      	ldrh	r0, [r7, #6]
 8001df6:	893a      	ldrh	r2, [r7, #8]
 8001df8:	8979      	ldrh	r1, [r7, #10]
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	9301      	str	r3, [sp, #4]
 8001dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e00:	9300      	str	r3, [sp, #0]
 8001e02:	4603      	mov	r3, r0
 8001e04:	68f8      	ldr	r0, [r7, #12]
 8001e06:	f000 f9d3 	bl	80021b0 <I2C_RequestMemoryWrite>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d005      	beq.n	8001e1c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e0a9      	b.n	8001f70 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	2bff      	cmp	r3, #255	@ 0xff
 8001e24:	d90e      	bls.n	8001e44 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	22ff      	movs	r2, #255	@ 0xff
 8001e2a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	8979      	ldrh	r1, [r7, #10]
 8001e34:	2300      	movs	r3, #0
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	f000 fc47 	bl	80026d0 <I2C_TransferConfig>
 8001e42:	e00f      	b.n	8001e64 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	8979      	ldrh	r1, [r7, #10]
 8001e56:	2300      	movs	r3, #0
 8001e58:	9300      	str	r3, [sp, #0]
 8001e5a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f000 fc36 	bl	80026d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e64:	697a      	ldr	r2, [r7, #20]
 8001e66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001e68:	68f8      	ldr	r0, [r7, #12]
 8001e6a:	f000 fac6 	bl	80023fa <I2C_WaitOnTXISFlagUntilTimeout>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e07b      	b.n	8001f70 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e7c:	781a      	ldrb	r2, [r3, #0]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e88:	1c5a      	adds	r2, r3, #1
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	3b01      	subs	r3, #1
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d034      	beq.n	8001f1c <HAL_I2C_Mem_Write+0x1c8>
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d130      	bne.n	8001f1c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	9300      	str	r3, [sp, #0]
 8001ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	2180      	movs	r1, #128	@ 0x80
 8001ec4:	68f8      	ldr	r0, [r7, #12]
 8001ec6:	f000 fa3f 	bl	8002348 <I2C_WaitOnFlagUntilTimeout>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e04d      	b.n	8001f70 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	2bff      	cmp	r3, #255	@ 0xff
 8001edc:	d90e      	bls.n	8001efc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	22ff      	movs	r2, #255	@ 0xff
 8001ee2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	8979      	ldrh	r1, [r7, #10]
 8001eec:	2300      	movs	r3, #0
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001ef4:	68f8      	ldr	r0, [r7, #12]
 8001ef6:	f000 fbeb 	bl	80026d0 <I2C_TransferConfig>
 8001efa:	e00f      	b.n	8001f1c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	8979      	ldrh	r1, [r7, #10]
 8001f0e:	2300      	movs	r3, #0
 8001f10:	9300      	str	r3, [sp, #0]
 8001f12:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f000 fbda 	bl	80026d0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d19e      	bne.n	8001e64 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001f2a:	68f8      	ldr	r0, [r7, #12]
 8001f2c:	f000 faac 	bl	8002488 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e01a      	b.n	8001f70 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2220      	movs	r2, #32
 8001f40:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	6859      	ldr	r1, [r3, #4]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f78 <HAL_I2C_Mem_Write+0x224>)
 8001f4e:	400b      	ands	r3, r1
 8001f50:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2220      	movs	r2, #32
 8001f56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	e000      	b.n	8001f70 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001f6e:	2302      	movs	r3, #2
  }
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3718      	adds	r7, #24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	fe00e800 	.word	0xfe00e800

08001f7c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b088      	sub	sp, #32
 8001f80:	af02      	add	r7, sp, #8
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	4608      	mov	r0, r1
 8001f86:	4611      	mov	r1, r2
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	817b      	strh	r3, [r7, #10]
 8001f8e:	460b      	mov	r3, r1
 8001f90:	813b      	strh	r3, [r7, #8]
 8001f92:	4613      	mov	r3, r2
 8001f94:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b20      	cmp	r3, #32
 8001fa0:	f040 80fd 	bne.w	800219e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fa4:	6a3b      	ldr	r3, [r7, #32]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d002      	beq.n	8001fb0 <HAL_I2C_Mem_Read+0x34>
 8001faa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d105      	bne.n	8001fbc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fb6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e0f1      	b.n	80021a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d101      	bne.n	8001fca <HAL_I2C_Mem_Read+0x4e>
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	e0ea      	b.n	80021a0 <HAL_I2C_Mem_Read+0x224>
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001fd2:	f7ff fb93 	bl	80016fc <HAL_GetTick>
 8001fd6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	9300      	str	r3, [sp, #0]
 8001fdc:	2319      	movs	r3, #25
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	f000 f9af 	bl	8002348 <I2C_WaitOnFlagUntilTimeout>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e0d5      	b.n	80021a0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2222      	movs	r2, #34	@ 0x22
 8001ff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2240      	movs	r2, #64	@ 0x40
 8002000:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2200      	movs	r2, #0
 8002008:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6a3a      	ldr	r2, [r7, #32]
 800200e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002014:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2200      	movs	r2, #0
 800201a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800201c:	88f8      	ldrh	r0, [r7, #6]
 800201e:	893a      	ldrh	r2, [r7, #8]
 8002020:	8979      	ldrh	r1, [r7, #10]
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	9301      	str	r3, [sp, #4]
 8002026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	4603      	mov	r3, r0
 800202c:	68f8      	ldr	r0, [r7, #12]
 800202e:	f000 f913 	bl	8002258 <I2C_RequestMemoryRead>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d005      	beq.n	8002044 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0ad      	b.n	80021a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002048:	b29b      	uxth	r3, r3
 800204a:	2bff      	cmp	r3, #255	@ 0xff
 800204c:	d90e      	bls.n	800206c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	22ff      	movs	r2, #255	@ 0xff
 8002052:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002058:	b2da      	uxtb	r2, r3
 800205a:	8979      	ldrh	r1, [r7, #10]
 800205c:	4b52      	ldr	r3, [pc, #328]	@ (80021a8 <HAL_I2C_Mem_Read+0x22c>)
 800205e:	9300      	str	r3, [sp, #0]
 8002060:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002064:	68f8      	ldr	r0, [r7, #12]
 8002066:	f000 fb33 	bl	80026d0 <I2C_TransferConfig>
 800206a:	e00f      	b.n	800208c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002070:	b29a      	uxth	r2, r3
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800207a:	b2da      	uxtb	r2, r3
 800207c:	8979      	ldrh	r1, [r7, #10]
 800207e:	4b4a      	ldr	r3, [pc, #296]	@ (80021a8 <HAL_I2C_Mem_Read+0x22c>)
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f000 fb22 	bl	80026d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	9300      	str	r3, [sp, #0]
 8002090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002092:	2200      	movs	r2, #0
 8002094:	2104      	movs	r1, #4
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f000 f956 	bl	8002348 <I2C_WaitOnFlagUntilTimeout>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e07c      	b.n	80021a0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b0:	b2d2      	uxtb	r2, r2
 80020b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b8:	1c5a      	adds	r2, r3, #1
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020c2:	3b01      	subs	r3, #1
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	3b01      	subs	r3, #1
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020dc:	b29b      	uxth	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d034      	beq.n	800214c <HAL_I2C_Mem_Read+0x1d0>
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d130      	bne.n	800214c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	9300      	str	r3, [sp, #0]
 80020ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020f0:	2200      	movs	r2, #0
 80020f2:	2180      	movs	r1, #128	@ 0x80
 80020f4:	68f8      	ldr	r0, [r7, #12]
 80020f6:	f000 f927 	bl	8002348 <I2C_WaitOnFlagUntilTimeout>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e04d      	b.n	80021a0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002108:	b29b      	uxth	r3, r3
 800210a:	2bff      	cmp	r3, #255	@ 0xff
 800210c:	d90e      	bls.n	800212c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	22ff      	movs	r2, #255	@ 0xff
 8002112:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002118:	b2da      	uxtb	r2, r3
 800211a:	8979      	ldrh	r1, [r7, #10]
 800211c:	2300      	movs	r3, #0
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	f000 fad3 	bl	80026d0 <I2C_TransferConfig>
 800212a:	e00f      	b.n	800214c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002130:	b29a      	uxth	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800213a:	b2da      	uxtb	r2, r3
 800213c:	8979      	ldrh	r1, [r7, #10]
 800213e:	2300      	movs	r3, #0
 8002140:	9300      	str	r3, [sp, #0]
 8002142:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f000 fac2 	bl	80026d0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002150:	b29b      	uxth	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d19a      	bne.n	800208c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f000 f994 	bl	8002488 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e01a      	b.n	80021a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2220      	movs	r2, #32
 8002170:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6859      	ldr	r1, [r3, #4]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	4b0b      	ldr	r3, [pc, #44]	@ (80021ac <HAL_I2C_Mem_Read+0x230>)
 800217e:	400b      	ands	r3, r1
 8002180:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2220      	movs	r2, #32
 8002186:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800219a:	2300      	movs	r3, #0
 800219c:	e000      	b.n	80021a0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800219e:	2302      	movs	r3, #2
  }
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3718      	adds	r7, #24
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	80002400 	.word	0x80002400
 80021ac:	fe00e800 	.word	0xfe00e800

080021b0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af02      	add	r7, sp, #8
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	4608      	mov	r0, r1
 80021ba:	4611      	mov	r1, r2
 80021bc:	461a      	mov	r2, r3
 80021be:	4603      	mov	r3, r0
 80021c0:	817b      	strh	r3, [r7, #10]
 80021c2:	460b      	mov	r3, r1
 80021c4:	813b      	strh	r3, [r7, #8]
 80021c6:	4613      	mov	r3, r2
 80021c8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80021ca:	88fb      	ldrh	r3, [r7, #6]
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	8979      	ldrh	r1, [r7, #10]
 80021d0:	4b20      	ldr	r3, [pc, #128]	@ (8002254 <I2C_RequestMemoryWrite+0xa4>)
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80021d8:	68f8      	ldr	r0, [r7, #12]
 80021da:	f000 fa79 	bl	80026d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021de:	69fa      	ldr	r2, [r7, #28]
 80021e0:	69b9      	ldr	r1, [r7, #24]
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f000 f909 	bl	80023fa <I2C_WaitOnTXISFlagUntilTimeout>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e02c      	b.n	800224c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80021f2:	88fb      	ldrh	r3, [r7, #6]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d105      	bne.n	8002204 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80021f8:	893b      	ldrh	r3, [r7, #8]
 80021fa:	b2da      	uxtb	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	629a      	str	r2, [r3, #40]	@ 0x28
 8002202:	e015      	b.n	8002230 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002204:	893b      	ldrh	r3, [r7, #8]
 8002206:	0a1b      	lsrs	r3, r3, #8
 8002208:	b29b      	uxth	r3, r3
 800220a:	b2da      	uxtb	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002212:	69fa      	ldr	r2, [r7, #28]
 8002214:	69b9      	ldr	r1, [r7, #24]
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f000 f8ef 	bl	80023fa <I2C_WaitOnTXISFlagUntilTimeout>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e012      	b.n	800224c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002226:	893b      	ldrh	r3, [r7, #8]
 8002228:	b2da      	uxtb	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	2200      	movs	r2, #0
 8002238:	2180      	movs	r1, #128	@ 0x80
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f000 f884 	bl	8002348 <I2C_WaitOnFlagUntilTimeout>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e000      	b.n	800224c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	80002000 	.word	0x80002000

08002258 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af02      	add	r7, sp, #8
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	4608      	mov	r0, r1
 8002262:	4611      	mov	r1, r2
 8002264:	461a      	mov	r2, r3
 8002266:	4603      	mov	r3, r0
 8002268:	817b      	strh	r3, [r7, #10]
 800226a:	460b      	mov	r3, r1
 800226c:	813b      	strh	r3, [r7, #8]
 800226e:	4613      	mov	r3, r2
 8002270:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002272:	88fb      	ldrh	r3, [r7, #6]
 8002274:	b2da      	uxtb	r2, r3
 8002276:	8979      	ldrh	r1, [r7, #10]
 8002278:	4b20      	ldr	r3, [pc, #128]	@ (80022fc <I2C_RequestMemoryRead+0xa4>)
 800227a:	9300      	str	r3, [sp, #0]
 800227c:	2300      	movs	r3, #0
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f000 fa26 	bl	80026d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002284:	69fa      	ldr	r2, [r7, #28]
 8002286:	69b9      	ldr	r1, [r7, #24]
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f000 f8b6 	bl	80023fa <I2C_WaitOnTXISFlagUntilTimeout>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e02c      	b.n	80022f2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002298:	88fb      	ldrh	r3, [r7, #6]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d105      	bne.n	80022aa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800229e:	893b      	ldrh	r3, [r7, #8]
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	629a      	str	r2, [r3, #40]	@ 0x28
 80022a8:	e015      	b.n	80022d6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80022aa:	893b      	ldrh	r3, [r7, #8]
 80022ac:	0a1b      	lsrs	r3, r3, #8
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022b8:	69fa      	ldr	r2, [r7, #28]
 80022ba:	69b9      	ldr	r1, [r7, #24]
 80022bc:	68f8      	ldr	r0, [r7, #12]
 80022be:	f000 f89c 	bl	80023fa <I2C_WaitOnTXISFlagUntilTimeout>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e012      	b.n	80022f2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80022cc:	893b      	ldrh	r3, [r7, #8]
 80022ce:	b2da      	uxtb	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	2200      	movs	r2, #0
 80022de:	2140      	movs	r1, #64	@ 0x40
 80022e0:	68f8      	ldr	r0, [r7, #12]
 80022e2:	f000 f831 	bl	8002348 <I2C_WaitOnFlagUntilTimeout>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e000      	b.n	80022f2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	80002000 	.word	0x80002000

08002300 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b02      	cmp	r3, #2
 8002314:	d103      	bne.n	800231e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2200      	movs	r2, #0
 800231c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	f003 0301 	and.w	r3, r3, #1
 8002328:	2b01      	cmp	r3, #1
 800232a:	d007      	beq.n	800233c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	699a      	ldr	r2, [r3, #24]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f042 0201 	orr.w	r2, r2, #1
 800233a:	619a      	str	r2, [r3, #24]
  }
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	603b      	str	r3, [r7, #0]
 8002354:	4613      	mov	r3, r2
 8002356:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002358:	e03b      	b.n	80023d2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	6839      	ldr	r1, [r7, #0]
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f000 f8d6 	bl	8002510 <I2C_IsErrorOccurred>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e041      	b.n	80023f2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002374:	d02d      	beq.n	80023d2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002376:	f7ff f9c1 	bl	80016fc <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	429a      	cmp	r2, r3
 8002384:	d302      	bcc.n	800238c <I2C_WaitOnFlagUntilTimeout+0x44>
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d122      	bne.n	80023d2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	699a      	ldr	r2, [r3, #24]
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	4013      	ands	r3, r2
 8002396:	68ba      	ldr	r2, [r7, #8]
 8002398:	429a      	cmp	r2, r3
 800239a:	bf0c      	ite	eq
 800239c:	2301      	moveq	r3, #1
 800239e:	2300      	movne	r3, #0
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	461a      	mov	r2, r3
 80023a4:	79fb      	ldrb	r3, [r7, #7]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d113      	bne.n	80023d2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ae:	f043 0220 	orr.w	r2, r3, #32
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2220      	movs	r2, #32
 80023ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e00f      	b.n	80023f2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	699a      	ldr	r2, [r3, #24]
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	4013      	ands	r3, r2
 80023dc:	68ba      	ldr	r2, [r7, #8]
 80023de:	429a      	cmp	r2, r3
 80023e0:	bf0c      	ite	eq
 80023e2:	2301      	moveq	r3, #1
 80023e4:	2300      	movne	r3, #0
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	461a      	mov	r2, r3
 80023ea:	79fb      	ldrb	r3, [r7, #7]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d0b4      	beq.n	800235a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b084      	sub	sp, #16
 80023fe:	af00      	add	r7, sp, #0
 8002400:	60f8      	str	r0, [r7, #12]
 8002402:	60b9      	str	r1, [r7, #8]
 8002404:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002406:	e033      	b.n	8002470 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	68b9      	ldr	r1, [r7, #8]
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	f000 f87f 	bl	8002510 <I2C_IsErrorOccurred>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e031      	b.n	8002480 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002422:	d025      	beq.n	8002470 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002424:	f7ff f96a 	bl	80016fc <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	429a      	cmp	r2, r3
 8002432:	d302      	bcc.n	800243a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d11a      	bne.n	8002470 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b02      	cmp	r3, #2
 8002446:	d013      	beq.n	8002470 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800244c:	f043 0220 	orr.w	r2, r3, #32
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2220      	movs	r2, #32
 8002458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e007      	b.n	8002480 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b02      	cmp	r3, #2
 800247c:	d1c4      	bne.n	8002408 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002494:	e02f      	b.n	80024f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	68b9      	ldr	r1, [r7, #8]
 800249a:	68f8      	ldr	r0, [r7, #12]
 800249c:	f000 f838 	bl	8002510 <I2C_IsErrorOccurred>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e02d      	b.n	8002506 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024aa:	f7ff f927 	bl	80016fc <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	68ba      	ldr	r2, [r7, #8]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d302      	bcc.n	80024c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d11a      	bne.n	80024f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	f003 0320 	and.w	r3, r3, #32
 80024ca:	2b20      	cmp	r3, #32
 80024cc:	d013      	beq.n	80024f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024d2:	f043 0220 	orr.w	r2, r3, #32
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2220      	movs	r2, #32
 80024de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e007      	b.n	8002506 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	f003 0320 	and.w	r3, r3, #32
 8002500:	2b20      	cmp	r3, #32
 8002502:	d1c8      	bne.n	8002496 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
	...

08002510 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b08a      	sub	sp, #40	@ 0x28
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800251c:	2300      	movs	r3, #0
 800251e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800252a:	2300      	movs	r3, #0
 800252c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	f003 0310 	and.w	r3, r3, #16
 8002538:	2b00      	cmp	r3, #0
 800253a:	d068      	beq.n	800260e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2210      	movs	r2, #16
 8002542:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002544:	e049      	b.n	80025da <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800254c:	d045      	beq.n	80025da <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800254e:	f7ff f8d5 	bl	80016fc <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	68ba      	ldr	r2, [r7, #8]
 800255a:	429a      	cmp	r2, r3
 800255c:	d302      	bcc.n	8002564 <I2C_IsErrorOccurred+0x54>
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d13a      	bne.n	80025da <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800256e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002576:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002582:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002586:	d121      	bne.n	80025cc <I2C_IsErrorOccurred+0xbc>
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800258e:	d01d      	beq.n	80025cc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002590:	7cfb      	ldrb	r3, [r7, #19]
 8002592:	2b20      	cmp	r3, #32
 8002594:	d01a      	beq.n	80025cc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	685a      	ldr	r2, [r3, #4]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80025a4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80025a6:	f7ff f8a9 	bl	80016fc <HAL_GetTick>
 80025aa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025ac:	e00e      	b.n	80025cc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80025ae:	f7ff f8a5 	bl	80016fc <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b19      	cmp	r3, #25
 80025ba:	d907      	bls.n	80025cc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80025bc:	6a3b      	ldr	r3, [r7, #32]
 80025be:	f043 0320 	orr.w	r3, r3, #32
 80025c2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80025ca:	e006      	b.n	80025da <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	f003 0320 	and.w	r3, r3, #32
 80025d6:	2b20      	cmp	r3, #32
 80025d8:	d1e9      	bne.n	80025ae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	f003 0320 	and.w	r3, r3, #32
 80025e4:	2b20      	cmp	r3, #32
 80025e6:	d003      	beq.n	80025f0 <I2C_IsErrorOccurred+0xe0>
 80025e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0aa      	beq.n	8002546 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80025f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d103      	bne.n	8002600 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2220      	movs	r2, #32
 80025fe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002600:	6a3b      	ldr	r3, [r7, #32]
 8002602:	f043 0304 	orr.w	r3, r3, #4
 8002606:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00b      	beq.n	8002638 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002620:	6a3b      	ldr	r3, [r7, #32]
 8002622:	f043 0301 	orr.w	r3, r3, #1
 8002626:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002630:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00b      	beq.n	800265a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002642:	6a3b      	ldr	r3, [r7, #32]
 8002644:	f043 0308 	orr.w	r3, r3, #8
 8002648:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002652:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00b      	beq.n	800267c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002664:	6a3b      	ldr	r3, [r7, #32]
 8002666:	f043 0302 	orr.w	r3, r3, #2
 800266a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002674:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800267c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002680:	2b00      	cmp	r3, #0
 8002682:	d01c      	beq.n	80026be <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002684:	68f8      	ldr	r0, [r7, #12]
 8002686:	f7ff fe3b 	bl	8002300 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	6859      	ldr	r1, [r3, #4]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	4b0d      	ldr	r3, [pc, #52]	@ (80026cc <I2C_IsErrorOccurred+0x1bc>)
 8002696:	400b      	ands	r3, r1
 8002698:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800269e:	6a3b      	ldr	r3, [r7, #32]
 80026a0:	431a      	orrs	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2220      	movs	r2, #32
 80026aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80026be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3728      	adds	r7, #40	@ 0x28
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	fe00e800 	.word	0xfe00e800

080026d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b087      	sub	sp, #28
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	607b      	str	r3, [r7, #4]
 80026da:	460b      	mov	r3, r1
 80026dc:	817b      	strh	r3, [r7, #10]
 80026de:	4613      	mov	r3, r2
 80026e0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026e2:	897b      	ldrh	r3, [r7, #10]
 80026e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80026e8:	7a7b      	ldrb	r3, [r7, #9]
 80026ea:	041b      	lsls	r3, r3, #16
 80026ec:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026f0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026f6:	6a3b      	ldr	r3, [r7, #32]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80026fe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	6a3b      	ldr	r3, [r7, #32]
 8002708:	0d5b      	lsrs	r3, r3, #21
 800270a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800270e:	4b08      	ldr	r3, [pc, #32]	@ (8002730 <I2C_TransferConfig+0x60>)
 8002710:	430b      	orrs	r3, r1
 8002712:	43db      	mvns	r3, r3
 8002714:	ea02 0103 	and.w	r1, r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	430a      	orrs	r2, r1
 8002720:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002722:	bf00      	nop
 8002724:	371c      	adds	r7, #28
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	03ff63ff 	.word	0x03ff63ff

08002734 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b20      	cmp	r3, #32
 8002748:	d138      	bne.n	80027bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002750:	2b01      	cmp	r3, #1
 8002752:	d101      	bne.n	8002758 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002754:	2302      	movs	r3, #2
 8002756:	e032      	b.n	80027be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2224      	movs	r2, #36	@ 0x24
 8002764:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f022 0201 	bic.w	r2, r2, #1
 8002776:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002786:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6819      	ldr	r1, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	430a      	orrs	r2, r1
 8002796:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f042 0201 	orr.w	r2, r2, #1
 80027a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2220      	movs	r2, #32
 80027ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80027b8:	2300      	movs	r3, #0
 80027ba:	e000      	b.n	80027be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80027bc:	2302      	movs	r3, #2
  }
}
 80027be:	4618      	mov	r0, r3
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr

080027ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b085      	sub	sp, #20
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
 80027d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b20      	cmp	r3, #32
 80027de:	d139      	bne.n	8002854 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d101      	bne.n	80027ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80027ea:	2302      	movs	r3, #2
 80027ec:	e033      	b.n	8002856 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2224      	movs	r2, #36	@ 0x24
 80027fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 0201 	bic.w	r2, r2, #1
 800280c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800281c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	021b      	lsls	r3, r3, #8
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	4313      	orrs	r3, r2
 8002826:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f042 0201 	orr.w	r2, r2, #1
 800283e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2220      	movs	r2, #32
 8002844:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002850:	2300      	movs	r3, #0
 8002852:	e000      	b.n	8002856 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002854:	2302      	movs	r3, #2
  }
}
 8002856:	4618      	mov	r0, r3
 8002858:	3714      	adds	r7, #20
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
	...

08002864 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002868:	4b05      	ldr	r3, [pc, #20]	@ (8002880 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a04      	ldr	r2, [pc, #16]	@ (8002880 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800286e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002872:	6013      	str	r3, [r2, #0]
}
 8002874:	bf00      	nop
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	58000400 	.word	0x58000400

08002884 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002888:	4b04      	ldr	r3, [pc, #16]	@ (800289c <HAL_PWREx_GetVoltageRange+0x18>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8002890:	4618      	mov	r0, r3
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	58000400 	.word	0x58000400

080028a0 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80028a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80028b2:	d101      	bne.n	80028b8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80028b4:	2301      	movs	r3, #1
 80028b6:	e000      	b.n	80028ba <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80028c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028d6:	6013      	str	r3, [r2, #0]
}
 80028d8:	bf00      	nop
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80028e2:	b480      	push	{r7}
 80028e4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80028e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028f4:	6013      	str	r3, [r2, #0]
}
 80028f6:	bf00      	nop
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002904:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800290e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002912:	d101      	bne.n	8002918 <LL_RCC_HSE_IsReady+0x18>
 8002914:	2301      	movs	r3, #1
 8002916:	e000      	b.n	800291a <LL_RCC_HSE_IsReady+0x1a>
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002928:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002932:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002936:	6013      	str	r3, [r2, #0]
}
 8002938:	bf00      	nop
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr

08002942 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8002942:	b480      	push	{r7}
 8002944:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002946:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002950:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002954:	6013      	str	r3, [r2, #0]
}
 8002956:	bf00      	nop
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002964:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800296e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002972:	d101      	bne.n	8002978 <LL_RCC_HSI_IsReady+0x18>
 8002974:	2301      	movs	r3, #1
 8002976:	e000      	b.n	800297a <LL_RCC_HSI_IsReady+0x1a>
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800298c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	061b      	lsls	r3, r3, #24
 800299a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800299e:	4313      	orrs	r3, r2
 80029a0:	604b      	str	r3, [r1, #4]
}
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr

080029ae <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 80029ae:	b480      	push	{r7}
 80029b0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80029b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80029ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029be:	f043 0301 	orr.w	r3, r3, #1
 80029c2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80029c6:	bf00      	nop
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80029d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80029dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029e0:	f023 0301 	bic.w	r3, r3, #1
 80029e4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80029e8:	bf00      	nop
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 80029f2:	b480      	push	{r7}
 80029f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80029f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d101      	bne.n	8002a0a <LL_RCC_HSI48_IsReady+0x18>
 8002a06:	2301      	movs	r3, #1
 8002a08:	e000      	b.n	8002a0c <LL_RCC_HSI48_IsReady+0x1a>
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr

08002a16 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8002a16:	b480      	push	{r7}
 8002a18:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a22:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a26:	f043 0301 	orr.w	r3, r3, #1
 8002a2a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002a2e:	bf00      	nop
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a48:	f023 0301 	bic.w	r3, r3, #1
 8002a4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002a50:	bf00      	nop
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002a5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a66:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a6a:	f043 0304 	orr.w	r3, r3, #4
 8002a6e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002a72:	bf00      	nop
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002a80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a88:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a8c:	f023 0304 	bic.w	r3, r3, #4
 8002a90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002a94:	bf00      	nop
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002aa2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d101      	bne.n	8002ab6 <LL_RCC_LSE_IsReady+0x18>
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e000      	b.n	8002ab8 <LL_RCC_LSE_IsReady+0x1a>
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002ac6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002aca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ace:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ad2:	f043 0301 	orr.w	r3, r3, #1
 8002ad6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002ada:	bf00      	nop
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002ae8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002aec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002af0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002af4:	f023 0301 	bic.w	r3, r3, #1
 8002af8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002afc:	bf00      	nop
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8002b06:	b480      	push	{r7}
 8002b08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002b0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d101      	bne.n	8002b1e <LL_RCC_LSI1_IsReady+0x18>
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e000      	b.n	8002b20 <LL_RCC_LSI1_IsReady+0x1a>
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002b2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b36:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b3a:	f043 0304 	orr.w	r3, r3, #4
 8002b3e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002b42:	bf00      	nop
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002b50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b58:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b5c:	f023 0304 	bic.w	r3, r3, #4
 8002b60:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002b64:	bf00      	nop
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002b72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b7a:	f003 0308 	and.w	r3, r3, #8
 8002b7e:	2b08      	cmp	r3, #8
 8002b80:	d101      	bne.n	8002b86 <LL_RCC_LSI2_IsReady+0x18>
 8002b82:	2301      	movs	r3, #1
 8002b84:	e000      	b.n	8002b88 <LL_RCC_LSI2_IsReady+0x1a>
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr

08002b92 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8002b92:	b480      	push	{r7}
 8002b94:	b083      	sub	sp, #12
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002b9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ba2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	021b      	lsls	r3, r3, #8
 8002baa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002bc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002bce:	f043 0301 	orr.w	r3, r3, #1
 8002bd2:	6013      	str	r3, [r2, #0]
}
 8002bd4:	bf00      	nop
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr

08002bde <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002bde:	b480      	push	{r7}
 8002be0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002be2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002bec:	f023 0301 	bic.w	r3, r3, #1
 8002bf0:	6013      	str	r3, [r2, #0]
}
 8002bf2:	bf00      	nop
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002c00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d101      	bne.n	8002c12 <LL_RCC_MSI_IsReady+0x16>
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e000      	b.n	8002c14 <LL_RCC_MSI_IsReady+0x18>
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b083      	sub	sp, #12
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002c26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c30:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	600b      	str	r3, [r1, #0]
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002c4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c56:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2bb0      	cmp	r3, #176	@ 0xb0
 8002c5c:	d901      	bls.n	8002c62 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8002c5e:	23b0      	movs	r3, #176	@ 0xb0
 8002c60:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8002c62:	687b      	ldr	r3, [r7, #4]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002c78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	021b      	lsls	r3, r3, #8
 8002c86:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	604b      	str	r3, [r1, #4]
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002ca2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f023 0203 	bic.w	r2, r3, #3
 8002cac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	608b      	str	r3, [r1, #8]
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002cc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f003 030c 	and.w	r3, r3, #12
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b083      	sub	sp, #12
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002ce2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	608b      	str	r3, [r1, #8]
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b083      	sub	sp, #12
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002d0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d0e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002d12:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d16:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002d22:	bf00      	nop
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b083      	sub	sp, #12
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002d36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d3a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002d3e:	f023 020f 	bic.w	r2, r3, #15
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	091b      	lsrs	r3, r3, #4
 8002d46:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002d64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d6e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	608b      	str	r3, [r1, #8]
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002d8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d96:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	608b      	str	r3, [r1, #8]
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002db0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002dc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dcc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002dd0:	011b      	lsls	r3, r3, #4
 8002dd2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002de4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002dee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002df2:	6013      	str	r3, [r2, #0]
}
 8002df4:	bf00      	nop
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr

08002dfe <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002e02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e0c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e10:	6013      	str	r3, [r2, #0]
}
 8002e12:	bf00      	nop
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002e20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e2a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e2e:	d101      	bne.n	8002e34 <LL_RCC_PLL_IsReady+0x18>
 8002e30:	2301      	movs	r3, #1
 8002e32:	e000      	b.n	8002e36 <LL_RCC_PLL_IsReady+0x1a>
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002e44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	0a1b      	lsrs	r3, r3, #8
 8002e4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002e5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr

08002e72 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002e72:	b480      	push	{r7}
 8002e74:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002e76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr

08002e8a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002e8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	f003 0303 	and.w	r3, r3, #3
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr

08002ea2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002ea6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002eb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002eb4:	d101      	bne.n	8002eba <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e000      	b.n	8002ebc <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002eca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ece:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002ed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ed6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002eda:	d101      	bne.n	8002ee0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002edc:	2301      	movs	r3, #1
 8002ede:	e000      	b.n	8002ee2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002ef0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ef4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002ef8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002efc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f00:	d101      	bne.n	8002f06 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002f02:	2301      	movs	r3, #1
 8002f04:	e000      	b.n	8002f08 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002f12:	b480      	push	{r7}
 8002f14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002f16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f24:	d101      	bne.n	8002f2a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002f26:	2301      	movs	r3, #1
 8002f28:	e000      	b.n	8002f2c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002f36:	b480      	push	{r7}
 8002f38:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002f3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f44:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002f48:	d101      	bne.n	8002f4e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e000      	b.n	8002f50 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
	...

08002f5c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f5c:	b590      	push	{r4, r7, lr}
 8002f5e:	b08d      	sub	sp, #52	@ 0x34
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e363      	b.n	8003636 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0320 	and.w	r3, r3, #32
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f000 808d 	beq.w	8003096 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f7c:	f7ff fea1 	bl	8002cc2 <LL_RCC_GetSysClkSource>
 8002f80:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f82:	f7ff ff82 	bl	8002e8a <LL_RCC_PLL_GetMainSource>
 8002f86:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d005      	beq.n	8002f9a <HAL_RCC_OscConfig+0x3e>
 8002f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f90:	2b0c      	cmp	r3, #12
 8002f92:	d147      	bne.n	8003024 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d144      	bne.n	8003024 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e347      	b.n	8003636 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8002faa:	f7ff fe4c 	bl	8002c46 <LL_RCC_MSI_GetRange>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	429c      	cmp	r4, r3
 8002fb2:	d914      	bls.n	8002fde <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f000 fd05 	bl	80039c8 <RCC_SetFlashLatencyFromMSIRange>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e336      	b.n	8003636 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7ff fe26 	bl	8002c1e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7ff fe4a 	bl	8002c70 <LL_RCC_MSI_SetCalibTrimming>
 8002fdc:	e013      	b.n	8003006 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7ff fe1b 	bl	8002c1e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff fe3f 	bl	8002c70 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 fce6 	bl	80039c8 <RCC_SetFlashLatencyFromMSIRange>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e317      	b.n	8003636 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003006:	f000 fccb 	bl	80039a0 <HAL_RCC_GetHCLKFreq>
 800300a:	4603      	mov	r3, r0
 800300c:	4aa4      	ldr	r2, [pc, #656]	@ (80032a0 <HAL_RCC_OscConfig+0x344>)
 800300e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003010:	4ba4      	ldr	r3, [pc, #656]	@ (80032a4 <HAL_RCC_OscConfig+0x348>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4618      	mov	r0, r3
 8003016:	f7fe fb23 	bl	8001660 <HAL_InitTick>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d039      	beq.n	8003094 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e308      	b.n	8003636 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	69db      	ldr	r3, [r3, #28]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d01e      	beq.n	800306a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800302c:	f7ff fdc8 	bl	8002bc0 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003030:	f7fe fb64 	bl	80016fc <HAL_GetTick>
 8003034:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003038:	f7fe fb60 	bl	80016fc <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b02      	cmp	r3, #2
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e2f5      	b.n	8003636 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800304a:	f7ff fdd7 	bl	8002bfc <LL_RCC_MSI_IsReady>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d0f1      	beq.n	8003038 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff fde0 	bl	8002c1e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	4618      	mov	r0, r3
 8003064:	f7ff fe04 	bl	8002c70 <LL_RCC_MSI_SetCalibTrimming>
 8003068:	e015      	b.n	8003096 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800306a:	f7ff fdb8 	bl	8002bde <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800306e:	f7fe fb45 	bl	80016fc <HAL_GetTick>
 8003072:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003074:	e008      	b.n	8003088 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003076:	f7fe fb41 	bl	80016fc <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e2d6      	b.n	8003636 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003088:	f7ff fdb8 	bl	8002bfc <LL_RCC_MSI_IsReady>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1f1      	bne.n	8003076 <HAL_RCC_OscConfig+0x11a>
 8003092:	e000      	b.n	8003096 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003094:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d047      	beq.n	8003132 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030a2:	f7ff fe0e 	bl	8002cc2 <LL_RCC_GetSysClkSource>
 80030a6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030a8:	f7ff feef 	bl	8002e8a <LL_RCC_PLL_GetMainSource>
 80030ac:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80030ae:	6a3b      	ldr	r3, [r7, #32]
 80030b0:	2b08      	cmp	r3, #8
 80030b2:	d005      	beq.n	80030c0 <HAL_RCC_OscConfig+0x164>
 80030b4:	6a3b      	ldr	r3, [r7, #32]
 80030b6:	2b0c      	cmp	r3, #12
 80030b8:	d108      	bne.n	80030cc <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	2b03      	cmp	r3, #3
 80030be:	d105      	bne.n	80030cc <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d134      	bne.n	8003132 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e2b4      	b.n	8003636 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030d4:	d102      	bne.n	80030dc <HAL_RCC_OscConfig+0x180>
 80030d6:	f7ff fbf5 	bl	80028c4 <LL_RCC_HSE_Enable>
 80030da:	e001      	b.n	80030e0 <HAL_RCC_OscConfig+0x184>
 80030dc:	f7ff fc01 	bl	80028e2 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d012      	beq.n	800310e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e8:	f7fe fb08 	bl	80016fc <HAL_GetTick>
 80030ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030f0:	f7fe fb04 	bl	80016fc <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b64      	cmp	r3, #100	@ 0x64
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e299      	b.n	8003636 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003102:	f7ff fbfd 	bl	8002900 <LL_RCC_HSE_IsReady>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d0f1      	beq.n	80030f0 <HAL_RCC_OscConfig+0x194>
 800310c:	e011      	b.n	8003132 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800310e:	f7fe faf5 	bl	80016fc <HAL_GetTick>
 8003112:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003114:	e008      	b.n	8003128 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003116:	f7fe faf1 	bl	80016fc <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b64      	cmp	r3, #100	@ 0x64
 8003122:	d901      	bls.n	8003128 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e286      	b.n	8003636 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003128:	f7ff fbea 	bl	8002900 <LL_RCC_HSE_IsReady>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1f1      	bne.n	8003116 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d04c      	beq.n	80031d8 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800313e:	f7ff fdc0 	bl	8002cc2 <LL_RCC_GetSysClkSource>
 8003142:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003144:	f7ff fea1 	bl	8002e8a <LL_RCC_PLL_GetMainSource>
 8003148:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	2b04      	cmp	r3, #4
 800314e:	d005      	beq.n	800315c <HAL_RCC_OscConfig+0x200>
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	2b0c      	cmp	r3, #12
 8003154:	d10e      	bne.n	8003174 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	2b02      	cmp	r3, #2
 800315a:	d10b      	bne.n	8003174 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d101      	bne.n	8003168 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e266      	b.n	8003636 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff fc09 	bl	8002984 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003172:	e031      	b.n	80031d8 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d019      	beq.n	80031b0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800317c:	f7ff fbd2 	bl	8002924 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003180:	f7fe fabc 	bl	80016fc <HAL_GetTick>
 8003184:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003188:	f7fe fab8 	bl	80016fc <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e24d      	b.n	8003636 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800319a:	f7ff fbe1 	bl	8002960 <LL_RCC_HSI_IsReady>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0f1      	beq.n	8003188 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7ff fbeb 	bl	8002984 <LL_RCC_HSI_SetCalibTrimming>
 80031ae:	e013      	b.n	80031d8 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031b0:	f7ff fbc7 	bl	8002942 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b4:	f7fe faa2 	bl	80016fc <HAL_GetTick>
 80031b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031bc:	f7fe fa9e 	bl	80016fc <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e233      	b.n	8003636 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80031ce:	f7ff fbc7 	bl	8002960 <LL_RCC_HSI_IsReady>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1f1      	bne.n	80031bc <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0308 	and.w	r3, r3, #8
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d106      	bne.n	80031f2 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f000 80a3 	beq.w	8003338 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d076      	beq.n	80032e8 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0310 	and.w	r3, r3, #16
 8003202:	2b00      	cmp	r3, #0
 8003204:	d046      	beq.n	8003294 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003206:	f7ff fc7e 	bl	8002b06 <LL_RCC_LSI1_IsReady>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d113      	bne.n	8003238 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003210:	f7ff fc57 	bl	8002ac2 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003214:	f7fe fa72 	bl	80016fc <HAL_GetTick>
 8003218:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800321c:	f7fe fa6e 	bl	80016fc <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e203      	b.n	8003636 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800322e:	f7ff fc6a 	bl	8002b06 <LL_RCC_LSI1_IsReady>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d0f1      	beq.n	800321c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003238:	f7ff fc77 	bl	8002b2a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323c:	f7fe fa5e 	bl	80016fc <HAL_GetTick>
 8003240:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003242:	e008      	b.n	8003256 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003244:	f7fe fa5a 	bl	80016fc <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b03      	cmp	r3, #3
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e1ef      	b.n	8003636 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003256:	f7ff fc8a 	bl	8002b6e <LL_RCC_LSI2_IsReady>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d0f1      	beq.n	8003244 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	4618      	mov	r0, r3
 8003266:	f7ff fc94 	bl	8002b92 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800326a:	f7ff fc3b 	bl	8002ae4 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800326e:	f7fe fa45 	bl	80016fc <HAL_GetTick>
 8003272:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003274:	e008      	b.n	8003288 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003276:	f7fe fa41 	bl	80016fc <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d901      	bls.n	8003288 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e1d6      	b.n	8003636 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003288:	f7ff fc3d 	bl	8002b06 <LL_RCC_LSI1_IsReady>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1f1      	bne.n	8003276 <HAL_RCC_OscConfig+0x31a>
 8003292:	e051      	b.n	8003338 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8003294:	f7ff fc15 	bl	8002ac2 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003298:	f7fe fa30 	bl	80016fc <HAL_GetTick>
 800329c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800329e:	e00c      	b.n	80032ba <HAL_RCC_OscConfig+0x35e>
 80032a0:	20000008 	.word	0x20000008
 80032a4:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80032a8:	f7fe fa28 	bl	80016fc <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e1bd      	b.n	8003636 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80032ba:	f7ff fc24 	bl	8002b06 <LL_RCC_LSI1_IsReady>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d0f1      	beq.n	80032a8 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80032c4:	f7ff fc42 	bl	8002b4c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80032c8:	e008      	b.n	80032dc <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80032ca:	f7fe fa17 	bl	80016fc <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b03      	cmp	r3, #3
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e1ac      	b.n	8003636 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80032dc:	f7ff fc47 	bl	8002b6e <LL_RCC_LSI2_IsReady>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1f1      	bne.n	80032ca <HAL_RCC_OscConfig+0x36e>
 80032e6:	e027      	b.n	8003338 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80032e8:	f7ff fc30 	bl	8002b4c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ec:	f7fe fa06 	bl	80016fc <HAL_GetTick>
 80032f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80032f4:	f7fe fa02 	bl	80016fc <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b03      	cmp	r3, #3
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e197      	b.n	8003636 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003306:	f7ff fc32 	bl	8002b6e <LL_RCC_LSI2_IsReady>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1f1      	bne.n	80032f4 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003310:	f7ff fbe8 	bl	8002ae4 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003314:	f7fe f9f2 	bl	80016fc <HAL_GetTick>
 8003318:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800331c:	f7fe f9ee 	bl	80016fc <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e183      	b.n	8003636 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800332e:	f7ff fbea 	bl	8002b06 <LL_RCC_LSI1_IsReady>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1f1      	bne.n	800331c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0304 	and.w	r3, r3, #4
 8003340:	2b00      	cmp	r3, #0
 8003342:	d05b      	beq.n	80033fc <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003344:	4ba7      	ldr	r3, [pc, #668]	@ (80035e4 <HAL_RCC_OscConfig+0x688>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800334c:	2b00      	cmp	r3, #0
 800334e:	d114      	bne.n	800337a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003350:	f7ff fa88 	bl	8002864 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003354:	f7fe f9d2 	bl	80016fc <HAL_GetTick>
 8003358:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800335c:	f7fe f9ce 	bl	80016fc <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b02      	cmp	r3, #2
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e163      	b.n	8003636 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800336e:	4b9d      	ldr	r3, [pc, #628]	@ (80035e4 <HAL_RCC_OscConfig+0x688>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003376:	2b00      	cmp	r3, #0
 8003378:	d0f0      	beq.n	800335c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d102      	bne.n	8003388 <HAL_RCC_OscConfig+0x42c>
 8003382:	f7ff fb48 	bl	8002a16 <LL_RCC_LSE_Enable>
 8003386:	e00c      	b.n	80033a2 <HAL_RCC_OscConfig+0x446>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	2b05      	cmp	r3, #5
 800338e:	d104      	bne.n	800339a <HAL_RCC_OscConfig+0x43e>
 8003390:	f7ff fb63 	bl	8002a5a <LL_RCC_LSE_EnableBypass>
 8003394:	f7ff fb3f 	bl	8002a16 <LL_RCC_LSE_Enable>
 8003398:	e003      	b.n	80033a2 <HAL_RCC_OscConfig+0x446>
 800339a:	f7ff fb4d 	bl	8002a38 <LL_RCC_LSE_Disable>
 800339e:	f7ff fb6d 	bl	8002a7c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d014      	beq.n	80033d4 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033aa:	f7fe f9a7 	bl	80016fc <HAL_GetTick>
 80033ae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80033b0:	e00a      	b.n	80033c8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033b2:	f7fe f9a3 	bl	80016fc <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d901      	bls.n	80033c8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e136      	b.n	8003636 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80033c8:	f7ff fb69 	bl	8002a9e <LL_RCC_LSE_IsReady>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d0ef      	beq.n	80033b2 <HAL_RCC_OscConfig+0x456>
 80033d2:	e013      	b.n	80033fc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d4:	f7fe f992 	bl	80016fc <HAL_GetTick>
 80033d8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80033da:	e00a      	b.n	80033f2 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033dc:	f7fe f98e 	bl	80016fc <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e121      	b.n	8003636 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80033f2:	f7ff fb54 	bl	8002a9e <LL_RCC_LSE_IsReady>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1ef      	bne.n	80033dc <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003404:	2b00      	cmp	r3, #0
 8003406:	d02c      	beq.n	8003462 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800340c:	2b00      	cmp	r3, #0
 800340e:	d014      	beq.n	800343a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003410:	f7ff facd 	bl	80029ae <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003414:	f7fe f972 	bl	80016fc <HAL_GetTick>
 8003418:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800341c:	f7fe f96e 	bl	80016fc <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e103      	b.n	8003636 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800342e:	f7ff fae0 	bl	80029f2 <LL_RCC_HSI48_IsReady>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d0f1      	beq.n	800341c <HAL_RCC_OscConfig+0x4c0>
 8003438:	e013      	b.n	8003462 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800343a:	f7ff fac9 	bl	80029d0 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800343e:	f7fe f95d 	bl	80016fc <HAL_GetTick>
 8003442:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003444:	e008      	b.n	8003458 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003446:	f7fe f959 	bl	80016fc <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d901      	bls.n	8003458 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e0ee      	b.n	8003636 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003458:	f7ff facb 	bl	80029f2 <LL_RCC_HSI48_IsReady>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1f1      	bne.n	8003446 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 80e4 	beq.w	8003634 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800346c:	f7ff fc29 	bl	8002cc2 <LL_RCC_GetSysClkSource>
 8003470:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003472:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800347e:	2b02      	cmp	r3, #2
 8003480:	f040 80b4 	bne.w	80035ec <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f003 0203 	and.w	r2, r3, #3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800348e:	429a      	cmp	r2, r3
 8003490:	d123      	bne.n	80034da <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800349c:	429a      	cmp	r2, r3
 800349e:	d11c      	bne.n	80034da <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	0a1b      	lsrs	r3, r3, #8
 80034a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d114      	bne.n	80034da <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d10d      	bne.n	80034da <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d106      	bne.n	80034da <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d05d      	beq.n	8003596 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	2b0c      	cmp	r3, #12
 80034de:	d058      	beq.n	8003592 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80034e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e0a1      	b.n	8003636 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80034f2:	f7ff fc84 	bl	8002dfe <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034f6:	f7fe f901 	bl	80016fc <HAL_GetTick>
 80034fa:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034fc:	e008      	b.n	8003510 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034fe:	f7fe f8fd 	bl	80016fc <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d901      	bls.n	8003510 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e092      	b.n	8003636 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003510:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1ef      	bne.n	80034fe <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800351e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003522:	68da      	ldr	r2, [r3, #12]
 8003524:	4b30      	ldr	r3, [pc, #192]	@ (80035e8 <HAL_RCC_OscConfig+0x68c>)
 8003526:	4013      	ands	r3, r2
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003530:	4311      	orrs	r1, r2
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003536:	0212      	lsls	r2, r2, #8
 8003538:	4311      	orrs	r1, r2
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800353e:	4311      	orrs	r1, r2
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003544:	4311      	orrs	r1, r2
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800354a:	430a      	orrs	r2, r1
 800354c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003550:	4313      	orrs	r3, r2
 8003552:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003554:	f7ff fc44 	bl	8002de0 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003558:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003562:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003566:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003568:	f7fe f8c8 	bl	80016fc <HAL_GetTick>
 800356c:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003570:	f7fe f8c4 	bl	80016fc <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e059      	b.n	8003636 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003582:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d0ef      	beq.n	8003570 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003590:	e050      	b.n	8003634 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e04f      	b.n	8003636 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003596:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d147      	bne.n	8003634 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80035a4:	f7ff fc1c 	bl	8002de0 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80035b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035b8:	f7fe f8a0 	bl	80016fc <HAL_GetTick>
 80035bc:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035be:	e008      	b.n	80035d2 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035c0:	f7fe f89c 	bl	80016fc <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e031      	b.n	8003636 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d0ef      	beq.n	80035c0 <HAL_RCC_OscConfig+0x664>
 80035e0:	e028      	b.n	8003634 <HAL_RCC_OscConfig+0x6d8>
 80035e2:	bf00      	nop
 80035e4:	58000400 	.word	0x58000400
 80035e8:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	2b0c      	cmp	r3, #12
 80035f0:	d01e      	beq.n	8003630 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035f2:	f7ff fc04 	bl	8002dfe <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f6:	f7fe f881 	bl	80016fc <HAL_GetTick>
 80035fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035fc:	e008      	b.n	8003610 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035fe:	f7fe f87d 	bl	80016fc <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e012      	b.n	8003636 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003610:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1ef      	bne.n	80035fe <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800361e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003622:	68da      	ldr	r2, [r3, #12]
 8003624:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003628:	4b05      	ldr	r3, [pc, #20]	@ (8003640 <HAL_RCC_OscConfig+0x6e4>)
 800362a:	4013      	ands	r3, r2
 800362c:	60cb      	str	r3, [r1, #12]
 800362e:	e001      	b.n	8003634 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e000      	b.n	8003636 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3734      	adds	r7, #52	@ 0x34
 800363a:	46bd      	mov	sp, r7
 800363c:	bd90      	pop	{r4, r7, pc}
 800363e:	bf00      	nop
 8003640:	eefefffc 	.word	0xeefefffc

08003644 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d101      	bne.n	8003658 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e12d      	b.n	80038b4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003658:	4b98      	ldr	r3, [pc, #608]	@ (80038bc <HAL_RCC_ClockConfig+0x278>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0307 	and.w	r3, r3, #7
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	429a      	cmp	r2, r3
 8003664:	d91b      	bls.n	800369e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003666:	4b95      	ldr	r3, [pc, #596]	@ (80038bc <HAL_RCC_ClockConfig+0x278>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f023 0207 	bic.w	r2, r3, #7
 800366e:	4993      	ldr	r1, [pc, #588]	@ (80038bc <HAL_RCC_ClockConfig+0x278>)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	4313      	orrs	r3, r2
 8003674:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003676:	f7fe f841 	bl	80016fc <HAL_GetTick>
 800367a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800367c:	e008      	b.n	8003690 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800367e:	f7fe f83d 	bl	80016fc <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	2b02      	cmp	r3, #2
 800368a:	d901      	bls.n	8003690 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e111      	b.n	80038b4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003690:	4b8a      	ldr	r3, [pc, #552]	@ (80038bc <HAL_RCC_ClockConfig+0x278>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0307 	and.w	r3, r3, #7
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	429a      	cmp	r2, r3
 800369c:	d1ef      	bne.n	800367e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d016      	beq.n	80036d8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7ff fb13 	bl	8002cda <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80036b4:	f7fe f822 	bl	80016fc <HAL_GetTick>
 80036b8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80036ba:	e008      	b.n	80036ce <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80036bc:	f7fe f81e 	bl	80016fc <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e0f2      	b.n	80038b4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80036ce:	f7ff fbe8 	bl	8002ea2 <LL_RCC_IsActiveFlag_HPRE>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d0f1      	beq.n	80036bc <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0320 	and.w	r3, r3, #32
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d016      	beq.n	8003712 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7ff fb0a 	bl	8002d02 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80036ee:	f7fe f805 	bl	80016fc <HAL_GetTick>
 80036f2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80036f4:	e008      	b.n	8003708 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80036f6:	f7fe f801 	bl	80016fc <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d901      	bls.n	8003708 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e0d5      	b.n	80038b4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003708:	f7ff fbdd 	bl	8002ec6 <LL_RCC_IsActiveFlag_C2HPRE>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d0f1      	beq.n	80036f6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800371a:	2b00      	cmp	r3, #0
 800371c:	d016      	beq.n	800374c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	4618      	mov	r0, r3
 8003724:	f7ff fb03 	bl	8002d2e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003728:	f7fd ffe8 	bl	80016fc <HAL_GetTick>
 800372c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800372e:	e008      	b.n	8003742 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003730:	f7fd ffe4 	bl	80016fc <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b02      	cmp	r3, #2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e0b8      	b.n	80038b4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003742:	f7ff fbd3 	bl	8002eec <LL_RCC_IsActiveFlag_SHDHPRE>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d0f1      	beq.n	8003730 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	2b00      	cmp	r3, #0
 8003756:	d016      	beq.n	8003786 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	4618      	mov	r0, r3
 800375e:	f7ff fafd 	bl	8002d5c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003762:	f7fd ffcb 	bl	80016fc <HAL_GetTick>
 8003766:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003768:	e008      	b.n	800377c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800376a:	f7fd ffc7 	bl	80016fc <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b02      	cmp	r3, #2
 8003776:	d901      	bls.n	800377c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e09b      	b.n	80038b4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800377c:	f7ff fbc9 	bl	8002f12 <LL_RCC_IsActiveFlag_PPRE1>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d0f1      	beq.n	800376a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0308 	and.w	r3, r3, #8
 800378e:	2b00      	cmp	r3, #0
 8003790:	d017      	beq.n	80037c2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	4618      	mov	r0, r3
 800379a:	f7ff faf3 	bl	8002d84 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800379e:	f7fd ffad 	bl	80016fc <HAL_GetTick>
 80037a2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80037a4:	e008      	b.n	80037b8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80037a6:	f7fd ffa9 	bl	80016fc <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d901      	bls.n	80037b8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e07d      	b.n	80038b4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80037b8:	f7ff fbbd 	bl	8002f36 <LL_RCC_IsActiveFlag_PPRE2>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d0f1      	beq.n	80037a6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d043      	beq.n	8003856 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d106      	bne.n	80037e4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80037d6:	f7ff f893 	bl	8002900 <LL_RCC_HSE_IsReady>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d11e      	bne.n	800381e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e067      	b.n	80038b4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	2b03      	cmp	r3, #3
 80037ea:	d106      	bne.n	80037fa <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80037ec:	f7ff fb16 	bl	8002e1c <LL_RCC_PLL_IsReady>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d113      	bne.n	800381e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e05c      	b.n	80038b4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d106      	bne.n	8003810 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003802:	f7ff f9fb 	bl	8002bfc <LL_RCC_MSI_IsReady>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d108      	bne.n	800381e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e051      	b.n	80038b4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003810:	f7ff f8a6 	bl	8002960 <LL_RCC_HSI_IsReady>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e04a      	b.n	80038b4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	4618      	mov	r0, r3
 8003824:	f7ff fa39 	bl	8002c9a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003828:	f7fd ff68 	bl	80016fc <HAL_GetTick>
 800382c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800382e:	e00a      	b.n	8003846 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003830:	f7fd ff64 	bl	80016fc <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800383e:	4293      	cmp	r3, r2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e036      	b.n	80038b4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003846:	f7ff fa3c 	bl	8002cc2 <LL_RCC_GetSysClkSource>
 800384a:	4602      	mov	r2, r0
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	429a      	cmp	r2, r3
 8003854:	d1ec      	bne.n	8003830 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003856:	4b19      	ldr	r3, [pc, #100]	@ (80038bc <HAL_RCC_ClockConfig+0x278>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0307 	and.w	r3, r3, #7
 800385e:	683a      	ldr	r2, [r7, #0]
 8003860:	429a      	cmp	r2, r3
 8003862:	d21b      	bcs.n	800389c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003864:	4b15      	ldr	r3, [pc, #84]	@ (80038bc <HAL_RCC_ClockConfig+0x278>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f023 0207 	bic.w	r2, r3, #7
 800386c:	4913      	ldr	r1, [pc, #76]	@ (80038bc <HAL_RCC_ClockConfig+0x278>)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	4313      	orrs	r3, r2
 8003872:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003874:	f7fd ff42 	bl	80016fc <HAL_GetTick>
 8003878:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800387a:	e008      	b.n	800388e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800387c:	f7fd ff3e 	bl	80016fc <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d901      	bls.n	800388e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e012      	b.n	80038b4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800388e:	4b0b      	ldr	r3, [pc, #44]	@ (80038bc <HAL_RCC_ClockConfig+0x278>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0307 	and.w	r3, r3, #7
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	429a      	cmp	r2, r3
 800389a:	d1ef      	bne.n	800387c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800389c:	f000 f880 	bl	80039a0 <HAL_RCC_GetHCLKFreq>
 80038a0:	4603      	mov	r3, r0
 80038a2:	4a07      	ldr	r2, [pc, #28]	@ (80038c0 <HAL_RCC_ClockConfig+0x27c>)
 80038a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80038a6:	f7fd ff35 	bl	8001714 <HAL_GetTickPrio>
 80038aa:	4603      	mov	r3, r0
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7fd fed7 	bl	8001660 <HAL_InitTick>
 80038b2:	4603      	mov	r3, r0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	58004000 	.word	0x58004000
 80038c0:	20000008 	.word	0x20000008

080038c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038c4:	b590      	push	{r4, r7, lr}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038ca:	f7ff f9fa 	bl	8002cc2 <LL_RCC_GetSysClkSource>
 80038ce:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d10a      	bne.n	80038ec <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80038d6:	f7ff f9b6 	bl	8002c46 <LL_RCC_MSI_GetRange>
 80038da:	4603      	mov	r3, r0
 80038dc:	091b      	lsrs	r3, r3, #4
 80038de:	f003 030f 	and.w	r3, r3, #15
 80038e2:	4a2b      	ldr	r2, [pc, #172]	@ (8003990 <HAL_RCC_GetSysClockFreq+0xcc>)
 80038e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038e8:	60fb      	str	r3, [r7, #12]
 80038ea:	e04b      	b.n	8003984 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b04      	cmp	r3, #4
 80038f0:	d102      	bne.n	80038f8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80038f2:	4b28      	ldr	r3, [pc, #160]	@ (8003994 <HAL_RCC_GetSysClockFreq+0xd0>)
 80038f4:	60fb      	str	r3, [r7, #12]
 80038f6:	e045      	b.n	8003984 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b08      	cmp	r3, #8
 80038fc:	d10a      	bne.n	8003914 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80038fe:	f7fe ffcf 	bl	80028a0 <LL_RCC_HSE_IsEnabledDiv2>
 8003902:	4603      	mov	r3, r0
 8003904:	2b01      	cmp	r3, #1
 8003906:	d102      	bne.n	800390e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003908:	4b23      	ldr	r3, [pc, #140]	@ (8003998 <HAL_RCC_GetSysClockFreq+0xd4>)
 800390a:	60fb      	str	r3, [r7, #12]
 800390c:	e03a      	b.n	8003984 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800390e:	4b23      	ldr	r3, [pc, #140]	@ (800399c <HAL_RCC_GetSysClockFreq+0xd8>)
 8003910:	60fb      	str	r3, [r7, #12]
 8003912:	e037      	b.n	8003984 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003914:	f7ff fab9 	bl	8002e8a <LL_RCC_PLL_GetMainSource>
 8003918:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	2b02      	cmp	r3, #2
 800391e:	d003      	beq.n	8003928 <HAL_RCC_GetSysClockFreq+0x64>
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	2b03      	cmp	r3, #3
 8003924:	d003      	beq.n	800392e <HAL_RCC_GetSysClockFreq+0x6a>
 8003926:	e00d      	b.n	8003944 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003928:	4b1a      	ldr	r3, [pc, #104]	@ (8003994 <HAL_RCC_GetSysClockFreq+0xd0>)
 800392a:	60bb      	str	r3, [r7, #8]
        break;
 800392c:	e015      	b.n	800395a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800392e:	f7fe ffb7 	bl	80028a0 <LL_RCC_HSE_IsEnabledDiv2>
 8003932:	4603      	mov	r3, r0
 8003934:	2b01      	cmp	r3, #1
 8003936:	d102      	bne.n	800393e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003938:	4b17      	ldr	r3, [pc, #92]	@ (8003998 <HAL_RCC_GetSysClockFreq+0xd4>)
 800393a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800393c:	e00d      	b.n	800395a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800393e:	4b17      	ldr	r3, [pc, #92]	@ (800399c <HAL_RCC_GetSysClockFreq+0xd8>)
 8003940:	60bb      	str	r3, [r7, #8]
        break;
 8003942:	e00a      	b.n	800395a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003944:	f7ff f97f 	bl	8002c46 <LL_RCC_MSI_GetRange>
 8003948:	4603      	mov	r3, r0
 800394a:	091b      	lsrs	r3, r3, #4
 800394c:	f003 030f 	and.w	r3, r3, #15
 8003950:	4a0f      	ldr	r2, [pc, #60]	@ (8003990 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003956:	60bb      	str	r3, [r7, #8]
        break;
 8003958:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800395a:	f7ff fa71 	bl	8002e40 <LL_RCC_PLL_GetN>
 800395e:	4602      	mov	r2, r0
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	fb03 f402 	mul.w	r4, r3, r2
 8003966:	f7ff fa84 	bl	8002e72 <LL_RCC_PLL_GetDivider>
 800396a:	4603      	mov	r3, r0
 800396c:	091b      	lsrs	r3, r3, #4
 800396e:	3301      	adds	r3, #1
 8003970:	fbb4 f4f3 	udiv	r4, r4, r3
 8003974:	f7ff fa71 	bl	8002e5a <LL_RCC_PLL_GetR>
 8003978:	4603      	mov	r3, r0
 800397a:	0f5b      	lsrs	r3, r3, #29
 800397c:	3301      	adds	r3, #1
 800397e:	fbb4 f3f3 	udiv	r3, r4, r3
 8003982:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003984:	68fb      	ldr	r3, [r7, #12]
}
 8003986:	4618      	mov	r0, r3
 8003988:	3714      	adds	r7, #20
 800398a:	46bd      	mov	sp, r7
 800398c:	bd90      	pop	{r4, r7, pc}
 800398e:	bf00      	nop
 8003990:	08004454 	.word	0x08004454
 8003994:	00f42400 	.word	0x00f42400
 8003998:	003d0900 	.word	0x003d0900
 800399c:	007a1200 	.word	0x007a1200

080039a0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039a0:	b598      	push	{r3, r4, r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80039a4:	f7ff ff8e 	bl	80038c4 <HAL_RCC_GetSysClockFreq>
 80039a8:	4604      	mov	r4, r0
 80039aa:	f7ff f9ff 	bl	8002dac <LL_RCC_GetAHBPrescaler>
 80039ae:	4603      	mov	r3, r0
 80039b0:	091b      	lsrs	r3, r3, #4
 80039b2:	f003 030f 	and.w	r3, r3, #15
 80039b6:	4a03      	ldr	r2, [pc, #12]	@ (80039c4 <HAL_RCC_GetHCLKFreq+0x24>)
 80039b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039bc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	bd98      	pop	{r3, r4, r7, pc}
 80039c4:	08004414 	.word	0x08004414

080039c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80039c8:	b590      	push	{r4, r7, lr}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2bb0      	cmp	r3, #176	@ 0xb0
 80039d4:	d903      	bls.n	80039de <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80039d6:	4b15      	ldr	r3, [pc, #84]	@ (8003a2c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80039d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039da:	60fb      	str	r3, [r7, #12]
 80039dc:	e007      	b.n	80039ee <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	091b      	lsrs	r3, r3, #4
 80039e2:	f003 030f 	and.w	r3, r3, #15
 80039e6:	4a11      	ldr	r2, [pc, #68]	@ (8003a2c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80039e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ec:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80039ee:	f7ff f9e9 	bl	8002dc4 <LL_RCC_GetAHB4Prescaler>
 80039f2:	4603      	mov	r3, r0
 80039f4:	091b      	lsrs	r3, r3, #4
 80039f6:	f003 030f 	and.w	r3, r3, #15
 80039fa:	4a0d      	ldr	r2, [pc, #52]	@ (8003a30 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80039fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a06:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	4a0a      	ldr	r2, [pc, #40]	@ (8003a34 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a10:	0c9c      	lsrs	r4, r3, #18
 8003a12:	f7fe ff37 	bl	8002884 <HAL_PWREx_GetVoltageRange>
 8003a16:	4603      	mov	r3, r0
 8003a18:	4619      	mov	r1, r3
 8003a1a:	4620      	mov	r0, r4
 8003a1c:	f000 f80c 	bl	8003a38 <RCC_SetFlashLatency>
 8003a20:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3714      	adds	r7, #20
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd90      	pop	{r4, r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	08004454 	.word	0x08004454
 8003a30:	08004414 	.word	0x08004414
 8003a34:	431bde83 	.word	0x431bde83

08003a38 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003a38:	b590      	push	{r4, r7, lr}
 8003a3a:	b093      	sub	sp, #76	@ 0x4c
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003a42:	4b37      	ldr	r3, [pc, #220]	@ (8003b20 <RCC_SetFlashLatency+0xe8>)
 8003a44:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8003a48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003a4e:	4a35      	ldr	r2, [pc, #212]	@ (8003b24 <RCC_SetFlashLatency+0xec>)
 8003a50:	f107 031c 	add.w	r3, r7, #28
 8003a54:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a56:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003a5a:	4b33      	ldr	r3, [pc, #204]	@ (8003b28 <RCC_SetFlashLatency+0xf0>)
 8003a5c:	f107 040c 	add.w	r4, r7, #12
 8003a60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003a66:	2300      	movs	r3, #0
 8003a68:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a70:	d11a      	bne.n	8003aa8 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003a72:	2300      	movs	r3, #0
 8003a74:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a76:	e013      	b.n	8003aa0 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003a78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	3348      	adds	r3, #72	@ 0x48
 8003a7e:	443b      	add	r3, r7
 8003a80:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d807      	bhi.n	8003a9a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003a8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	3348      	adds	r3, #72	@ 0x48
 8003a90:	443b      	add	r3, r7
 8003a92:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003a96:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8003a98:	e020      	b.n	8003adc <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003a9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003aa0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003aa2:	2b03      	cmp	r3, #3
 8003aa4:	d9e8      	bls.n	8003a78 <RCC_SetFlashLatency+0x40>
 8003aa6:	e019      	b.n	8003adc <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003aac:	e013      	b.n	8003ad6 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003aae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	3348      	adds	r3, #72	@ 0x48
 8003ab4:	443b      	add	r3, r7
 8003ab6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d807      	bhi.n	8003ad0 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003ac0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	3348      	adds	r3, #72	@ 0x48
 8003ac6:	443b      	add	r3, r7
 8003ac8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003acc:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8003ace:	e005      	b.n	8003adc <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003ad0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ad6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d9e8      	bls.n	8003aae <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003adc:	4b13      	ldr	r3, [pc, #76]	@ (8003b2c <RCC_SetFlashLatency+0xf4>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f023 0207 	bic.w	r2, r3, #7
 8003ae4:	4911      	ldr	r1, [pc, #68]	@ (8003b2c <RCC_SetFlashLatency+0xf4>)
 8003ae6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003aec:	f7fd fe06 	bl	80016fc <HAL_GetTick>
 8003af0:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003af2:	e008      	b.n	8003b06 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003af4:	f7fd fe02 	bl	80016fc <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d901      	bls.n	8003b06 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e007      	b.n	8003b16 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003b06:	4b09      	ldr	r3, [pc, #36]	@ (8003b2c <RCC_SetFlashLatency+0xf4>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0307 	and.w	r3, r3, #7
 8003b0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d1ef      	bne.n	8003af4 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	374c      	adds	r7, #76	@ 0x4c
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd90      	pop	{r4, r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	080043e8 	.word	0x080043e8
 8003b24:	080043f8 	.word	0x080043f8
 8003b28:	08004404 	.word	0x08004404
 8003b2c:	58004000 	.word	0x58004000

08003b30 <LL_RCC_LSE_IsEnabled>:
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003b34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d101      	bne.n	8003b48 <LL_RCC_LSE_IsEnabled+0x18>
 8003b44:	2301      	movs	r3, #1
 8003b46:	e000      	b.n	8003b4a <LL_RCC_LSE_IsEnabled+0x1a>
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <LL_RCC_LSE_IsReady>:
{
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003b58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d101      	bne.n	8003b6c <LL_RCC_LSE_IsReady+0x18>
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e000      	b.n	8003b6e <LL_RCC_LSE_IsReady+0x1a>
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <LL_RCC_SetRFWKPClockSource>:
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003b80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b88:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003b8c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <LL_RCC_SetSMPSClockSource>:
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003bac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb2:	f023 0203 	bic.w	r2, r3, #3
 8003bb6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <LL_RCC_SetSMPSPrescaler>:
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003bd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bda:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003bde:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <LL_RCC_SetUSARTClockSource>:
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003bfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c04:	f023 0203 	bic.w	r2, r3, #3
 8003c08:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <LL_RCC_SetLPUARTClockSource>:
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003c28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c30:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003c34:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <LL_RCC_SetI2CClockSource>:
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003c54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c58:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	091b      	lsrs	r3, r3, #4
 8003c60:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003c64:	43db      	mvns	r3, r3
 8003c66:	401a      	ands	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	011b      	lsls	r3, r3, #4
 8003c6c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003c70:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c74:	4313      	orrs	r3, r2
 8003c76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <LL_RCC_SetLPTIMClockSource>:
{
 8003c86:	b480      	push	{r7}
 8003c88:	b083      	sub	sp, #12
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003c8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c92:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	0c1b      	lsrs	r3, r3, #16
 8003c9a:	041b      	lsls	r3, r3, #16
 8003c9c:	43db      	mvns	r3, r3
 8003c9e:	401a      	ands	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	041b      	lsls	r3, r3, #16
 8003ca4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003cae:	bf00      	nop
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <LL_RCC_SetSAIClockSource>:
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b083      	sub	sp, #12
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003cc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cca:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003cce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003cda:	bf00      	nop
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr

08003ce6 <LL_RCC_SetRNGClockSource>:
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b083      	sub	sp, #12
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003cee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cf6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003cfa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003d06:	bf00      	nop
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <LL_RCC_SetCLK48ClockSource>:
{
 8003d12:	b480      	push	{r7}
 8003d14:	b083      	sub	sp, #12
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003d1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d22:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003d32:	bf00      	nop
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr

08003d3e <LL_RCC_SetUSBClockSource>:
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b082      	sub	sp, #8
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f7ff ffe3 	bl	8003d12 <LL_RCC_SetCLK48ClockSource>
}
 8003d4c:	bf00      	nop
 8003d4e:	3708      	adds	r7, #8
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <LL_RCC_SetADCClockSource>:
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003d5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d64:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003d68:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <LL_RCC_SetRTCClockSource>:
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003d88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d90:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d94:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <LL_RCC_GetRTCClockSource>:
{
 8003dac:	b480      	push	{r7}
 8003dae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003db0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003db8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr

08003dc6 <LL_RCC_ForceBackupDomainReset>:
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003dca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dd2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003dd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dda:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003dde:	bf00      	nop
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003dec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003df4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003df8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003e00:	bf00      	nop
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr

08003e0a <LL_RCC_PLLSAI1_Enable>:
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003e0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e18:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003e1c:	6013      	str	r3, [r2, #0]
}
 8003e1e:	bf00      	nop
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <LL_RCC_PLLSAI1_Disable>:
{
 8003e28:	b480      	push	{r7}
 8003e2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003e2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e36:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003e3a:	6013      	str	r3, [r2, #0]
}
 8003e3c:	bf00      	nop
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <LL_RCC_PLLSAI1_IsReady>:
{
 8003e46:	b480      	push	{r7}
 8003e48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003e4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e58:	d101      	bne.n	8003e5e <LL_RCC_PLLSAI1_IsReady+0x18>
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e000      	b.n	8003e60 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr

08003e6a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b088      	sub	sp, #32
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003e72:	2300      	movs	r3, #0
 8003e74:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003e76:	2300      	movs	r3, #0
 8003e78:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d034      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e8a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003e8e:	d021      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003e90:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003e94:	d81b      	bhi.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003e96:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e9a:	d01d      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003e9c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ea0:	d815      	bhi.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00b      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003ea6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003eaa:	d110      	bne.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003eac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003eb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003eba:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003ebc:	e00d      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	3304      	adds	r3, #4
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 f947 	bl	8004156 <RCCEx_PLLSAI1_ConfigNP>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003ecc:	e005      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	77fb      	strb	r3, [r7, #31]
        break;
 8003ed2:	e002      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003ed4:	bf00      	nop
 8003ed6:	e000      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003ed8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eda:	7ffb      	ldrb	r3, [r7, #31]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d105      	bne.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7ff fee8 	bl	8003cba <LL_RCC_SetSAIClockSource>
 8003eea:	e001      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eec:	7ffb      	ldrb	r3, [r7, #31]
 8003eee:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d046      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003efc:	f7ff ff56 	bl	8003dac <LL_RCC_GetRTCClockSource>
 8003f00:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d03c      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003f0c:	f7fe fcaa 	bl	8002864 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d105      	bne.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7ff ff30 	bl	8003d80 <LL_RCC_SetRTCClockSource>
 8003f20:	e02e      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003f22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f2a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003f2c:	f7ff ff4b 	bl	8003dc6 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003f30:	f7ff ff5a 	bl	8003de8 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003f42:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003f4c:	f7ff fdf0 	bl	8003b30 <LL_RCC_LSE_IsEnabled>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d114      	bne.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f56:	f7fd fbd1 	bl	80016fc <HAL_GetTick>
 8003f5a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003f5c:	e00b      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f5e:	f7fd fbcd 	bl	80016fc <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d902      	bls.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	77fb      	strb	r3, [r7, #31]
              break;
 8003f74:	e004      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003f76:	f7ff fded 	bl	8003b54 <LL_RCC_LSE_IsReady>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d1ee      	bne.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003f80:	7ffb      	ldrb	r3, [r7, #31]
 8003f82:	77bb      	strb	r3, [r7, #30]
 8003f84:	e001      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f86:	7ffb      	ldrb	r3, [r7, #31]
 8003f88:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d004      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7ff fe2a 	bl	8003bf4 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0302 	and.w	r3, r3, #2
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d004      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	69db      	ldr	r3, [r3, #28]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7ff fe35 	bl	8003c20 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0310 	and.w	r3, r3, #16
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d004      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7ff fe5d 	bl	8003c86 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0320 	and.w	r3, r3, #32
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d004      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7ff fe52 	bl	8003c86 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0304 	and.w	r3, r3, #4
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d004      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7ff fe2a 	bl	8003c4c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0308 	and.w	r3, r3, #8
 8004000:	2b00      	cmp	r3, #0
 8004002:	d004      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004008:	4618      	mov	r0, r3
 800400a:	f7ff fe1f 	bl	8003c4c <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004016:	2b00      	cmp	r3, #0
 8004018:	d022      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800401e:	4618      	mov	r0, r3
 8004020:	f7ff fe8d 	bl	8003d3e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004028:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800402c:	d107      	bne.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800402e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004038:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800403c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004042:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004046:	d10b      	bne.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	3304      	adds	r3, #4
 800404c:	4618      	mov	r0, r3
 800404e:	f000 f8dd 	bl	800420c <RCCEx_PLLSAI1_ConfigNQ>
 8004052:	4603      	mov	r3, r0
 8004054:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004056:	7ffb      	ldrb	r3, [r7, #31]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d001      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800405c:	7ffb      	ldrb	r3, [r7, #31]
 800405e:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004068:	2b00      	cmp	r3, #0
 800406a:	d02b      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004070:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004074:	d008      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800407a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800407e:	d003      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004084:	2b00      	cmp	r3, #0
 8004086:	d105      	bne.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800408c:	4618      	mov	r0, r3
 800408e:	f7ff fe2a 	bl	8003ce6 <LL_RCC_SetRNGClockSource>
 8004092:	e00a      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x240>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004098:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800409c:	60fb      	str	r3, [r7, #12]
 800409e:	2000      	movs	r0, #0
 80040a0:	f7ff fe21 	bl	8003ce6 <LL_RCC_SetRNGClockSource>
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f7ff fe34 	bl	8003d12 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ae:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80040b2:	d107      	bne.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80040b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80040be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040c2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d022      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7ff fe3d 	bl	8003d54 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040e2:	d107      	bne.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80040e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80040ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040f2:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040fc:	d10b      	bne.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	3304      	adds	r3, #4
 8004102:	4618      	mov	r0, r3
 8004104:	f000 f8dd 	bl	80042c2 <RCCEx_PLLSAI1_ConfigNR>
 8004108:	4603      	mov	r3, r0
 800410a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800410c:	7ffb      	ldrb	r3, [r7, #31]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8004112:	7ffb      	ldrb	r3, [r7, #31]
 8004114:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d004      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004126:	4618      	mov	r0, r3
 8004128:	f7ff fd26 	bl	8003b78 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d009      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800413c:	4618      	mov	r0, r3
 800413e:	f7ff fd45 	bl	8003bcc <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004146:	4618      	mov	r0, r3
 8004148:	f7ff fd2c 	bl	8003ba4 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800414c:	7fbb      	ldrb	r3, [r7, #30]
}
 800414e:	4618      	mov	r0, r3
 8004150:	3720      	adds	r7, #32
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004156:	b580      	push	{r7, lr}
 8004158:	b084      	sub	sp, #16
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800415e:	2300      	movs	r3, #0
 8004160:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004162:	f7ff fe61 	bl	8003e28 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004166:	f7fd fac9 	bl	80016fc <HAL_GetTick>
 800416a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800416c:	e009      	b.n	8004182 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800416e:	f7fd fac5 	bl	80016fc <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	2b02      	cmp	r3, #2
 800417a:	d902      	bls.n	8004182 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	73fb      	strb	r3, [r7, #15]
      break;
 8004180:	e004      	b.n	800418c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004182:	f7ff fe60 	bl	8003e46 <LL_RCC_PLLSAI1_IsReady>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1f0      	bne.n	800416e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800418c:	7bfb      	ldrb	r3, [r7, #15]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d137      	bne.n	8004202 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004192:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	021b      	lsls	r3, r3, #8
 80041a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80041a6:	4313      	orrs	r3, r2
 80041a8:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80041aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80041bc:	4313      	orrs	r3, r2
 80041be:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80041c0:	f7ff fe23 	bl	8003e0a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041c4:	f7fd fa9a 	bl	80016fc <HAL_GetTick>
 80041c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80041ca:	e009      	b.n	80041e0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041cc:	f7fd fa96 	bl	80016fc <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d902      	bls.n	80041e0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	73fb      	strb	r3, [r7, #15]
        break;
 80041de:	e004      	b.n	80041ea <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80041e0:	f7ff fe31 	bl	8003e46 <LL_RCC_PLLSAI1_IsReady>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d1f0      	bne.n	80041cc <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80041ea:	7bfb      	ldrb	r3, [r7, #15]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d108      	bne.n	8004202 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80041f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041f4:	691a      	ldr	r2, [r3, #16]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80041fe:	4313      	orrs	r3, r2
 8004200:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004202:	7bfb      	ldrb	r3, [r7, #15]
}
 8004204:	4618      	mov	r0, r3
 8004206:	3710      	adds	r7, #16
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004214:	2300      	movs	r3, #0
 8004216:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004218:	f7ff fe06 	bl	8003e28 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800421c:	f7fd fa6e 	bl	80016fc <HAL_GetTick>
 8004220:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004222:	e009      	b.n	8004238 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004224:	f7fd fa6a 	bl	80016fc <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b02      	cmp	r3, #2
 8004230:	d902      	bls.n	8004238 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	73fb      	strb	r3, [r7, #15]
      break;
 8004236:	e004      	b.n	8004242 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004238:	f7ff fe05 	bl	8003e46 <LL_RCC_PLLSAI1_IsReady>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1f0      	bne.n	8004224 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8004242:	7bfb      	ldrb	r3, [r7, #15]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d137      	bne.n	80042b8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004248:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	021b      	lsls	r3, r3, #8
 8004258:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800425c:	4313      	orrs	r3, r2
 800425e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8004260:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004272:	4313      	orrs	r3, r2
 8004274:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004276:	f7ff fdc8 	bl	8003e0a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800427a:	f7fd fa3f 	bl	80016fc <HAL_GetTick>
 800427e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004280:	e009      	b.n	8004296 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004282:	f7fd fa3b 	bl	80016fc <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	2b02      	cmp	r3, #2
 800428e:	d902      	bls.n	8004296 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	73fb      	strb	r3, [r7, #15]
        break;
 8004294:	e004      	b.n	80042a0 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004296:	f7ff fdd6 	bl	8003e46 <LL_RCC_PLLSAI1_IsReady>
 800429a:	4603      	mov	r3, r0
 800429c:	2b01      	cmp	r3, #1
 800429e:	d1f0      	bne.n	8004282 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80042a0:	7bfb      	ldrb	r3, [r7, #15]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d108      	bne.n	80042b8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80042a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042aa:	691a      	ldr	r2, [r3, #16]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80042b4:	4313      	orrs	r3, r2
 80042b6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80042b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b084      	sub	sp, #16
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042ca:	2300      	movs	r3, #0
 80042cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80042ce:	f7ff fdab 	bl	8003e28 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80042d2:	f7fd fa13 	bl	80016fc <HAL_GetTick>
 80042d6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80042d8:	e009      	b.n	80042ee <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042da:	f7fd fa0f 	bl	80016fc <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d902      	bls.n	80042ee <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	73fb      	strb	r3, [r7, #15]
      break;
 80042ec:	e004      	b.n	80042f8 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80042ee:	f7ff fdaa 	bl	8003e46 <LL_RCC_PLLSAI1_IsReady>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1f0      	bne.n	80042da <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80042f8:	7bfb      	ldrb	r3, [r7, #15]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d137      	bne.n	800436e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80042fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	021b      	lsls	r3, r3, #8
 800430e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004312:	4313      	orrs	r3, r2
 8004314:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8004316:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004328:	4313      	orrs	r3, r2
 800432a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800432c:	f7ff fd6d 	bl	8003e0a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004330:	f7fd f9e4 	bl	80016fc <HAL_GetTick>
 8004334:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004336:	e009      	b.n	800434c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004338:	f7fd f9e0 	bl	80016fc <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b02      	cmp	r3, #2
 8004344:	d902      	bls.n	800434c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	73fb      	strb	r3, [r7, #15]
        break;
 800434a:	e004      	b.n	8004356 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800434c:	f7ff fd7b 	bl	8003e46 <LL_RCC_PLLSAI1_IsReady>
 8004350:	4603      	mov	r3, r0
 8004352:	2b01      	cmp	r3, #1
 8004354:	d1f0      	bne.n	8004338 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8004356:	7bfb      	ldrb	r3, [r7, #15]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d108      	bne.n	800436e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800435c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004360:	691a      	ldr	r2, [r3, #16]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800436a:	4313      	orrs	r3, r2
 800436c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800436e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004370:	4618      	mov	r0, r3
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <memset>:
 8004378:	4402      	add	r2, r0
 800437a:	4603      	mov	r3, r0
 800437c:	4293      	cmp	r3, r2
 800437e:	d100      	bne.n	8004382 <memset+0xa>
 8004380:	4770      	bx	lr
 8004382:	f803 1b01 	strb.w	r1, [r3], #1
 8004386:	e7f9      	b.n	800437c <memset+0x4>

08004388 <__libc_init_array>:
 8004388:	b570      	push	{r4, r5, r6, lr}
 800438a:	4d0d      	ldr	r5, [pc, #52]	@ (80043c0 <__libc_init_array+0x38>)
 800438c:	4c0d      	ldr	r4, [pc, #52]	@ (80043c4 <__libc_init_array+0x3c>)
 800438e:	1b64      	subs	r4, r4, r5
 8004390:	10a4      	asrs	r4, r4, #2
 8004392:	2600      	movs	r6, #0
 8004394:	42a6      	cmp	r6, r4
 8004396:	d109      	bne.n	80043ac <__libc_init_array+0x24>
 8004398:	4d0b      	ldr	r5, [pc, #44]	@ (80043c8 <__libc_init_array+0x40>)
 800439a:	4c0c      	ldr	r4, [pc, #48]	@ (80043cc <__libc_init_array+0x44>)
 800439c:	f000 f818 	bl	80043d0 <_init>
 80043a0:	1b64      	subs	r4, r4, r5
 80043a2:	10a4      	asrs	r4, r4, #2
 80043a4:	2600      	movs	r6, #0
 80043a6:	42a6      	cmp	r6, r4
 80043a8:	d105      	bne.n	80043b6 <__libc_init_array+0x2e>
 80043aa:	bd70      	pop	{r4, r5, r6, pc}
 80043ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80043b0:	4798      	blx	r3
 80043b2:	3601      	adds	r6, #1
 80043b4:	e7ee      	b.n	8004394 <__libc_init_array+0xc>
 80043b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80043ba:	4798      	blx	r3
 80043bc:	3601      	adds	r6, #1
 80043be:	e7f2      	b.n	80043a6 <__libc_init_array+0x1e>
 80043c0:	08004494 	.word	0x08004494
 80043c4:	08004494 	.word	0x08004494
 80043c8:	08004494 	.word	0x08004494
 80043cc:	08004498 	.word	0x08004498

080043d0 <_init>:
 80043d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043d2:	bf00      	nop
 80043d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043d6:	bc08      	pop	{r3}
 80043d8:	469e      	mov	lr, r3
 80043da:	4770      	bx	lr

080043dc <_fini>:
 80043dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043de:	bf00      	nop
 80043e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043e2:	bc08      	pop	{r3}
 80043e4:	469e      	mov	lr, r3
 80043e6:	4770      	bx	lr
